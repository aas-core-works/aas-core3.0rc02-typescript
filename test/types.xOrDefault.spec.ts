/**
 * Test `*OrDefault` functions.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_get_X_or_default.py
// Do NOT edit or append.

import * as path from "path";
import * as fs from "fs";

import * as AasStringification from "../src/stringification";
import * as AasTypes from "../src/types";
import * as TestCommon from "./common";
import * as TestCommonJsonization from "./commonJsonization";

/**
 * Represent explicitly a literal of an enumeration.
 */
class EnumerationLiteral {
  constructor(public enumerationName: string, public literalName) {
    // Intentionally empty.
  }

  toString(): string {
    return `${this.enumerationName}.${this.literalName}`;
  }
}

/**
 * Represent a value such that we can immediately check whether it is the default value
 * or the set one.
 *
 * @remark
 * We compare it against the recorded golden file, if not {@link common.RECORD_MODE}.
 * Otherwise, when {@link common.RECORD_MODE} is set, we re-record the golden file.
 *
 * @param value - to be represented
 * @param expectedPath - to the golden file
 */
function compareOrRecordValue(
  value: boolean | number | string | null | EnumerationLiteral | AasTypes.Class,
  expectedPath: string
): void {
  let got = "";
  if (
    typeof value === "boolean" ||
    typeof value === "number" ||
    typeof value === "string" ||
    value === null
  ) {
    got = JSON.stringify(value);
  } else if (value instanceof EnumerationLiteral) {
    got = value.toString();
  } else if (value instanceof AasTypes.Class) {
    got = TestCommon.traceMark(value);
  } else {
    throw new Error(`We do not know how to represent the value ${value}`);
  }

  // NOTE (mristin, 2022-12-09):
  // We add a new line for POSIX systems which prefer a new line
  // at the end of the file.
  got += "\n";

  if (TestCommon.RECORD_MODE) {
    const parent = path.dirname(expectedPath);
    if (!fs.existsSync(parent)) {
      fs.mkdirSync(parent, { recursive: true });
    }
    fs.writeFileSync(expectedPath, got, "utf-8");
  } else {
    if (!fs.existsSync(expectedPath)) {
      throw new Error(
        `The file with the recorded value does not exist: ${expectedPath}`
      );
    }

    const expected = fs.readFileSync(expectedPath, "utf-8").replace(/\r\n/g, "\n");
    expect(got).toStrictEqual(expected);
  }
}

test("Extension.valueTypeOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteExtension();

  const value = new EnumerationLiteral(
    "DataTypeDefXsd",
    AasStringification.mustDataTypeDefXsdToString(instance.valueTypeOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Extension",
      "valueTypeOrDefault.non-default.json"
    )
  );
});

test("Extension.valueTypeOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalExtension();

  const value = new EnumerationLiteral(
    "DataTypeDefXsd",
    AasStringification.mustDataTypeDefXsdToString(instance.valueTypeOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Extension",
      "valueTypeOrDefault.default.json"
    )
  );
});

test("Qualifier.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteQualifier();

  const value = new EnumerationLiteral(
    "QualifierKind",
    AasStringification.mustQualifierKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Qualifier",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Qualifier.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalQualifier();

  const value = new EnumerationLiteral(
    "QualifierKind",
    AasStringification.mustQualifierKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Qualifier",
      "kindOrDefault.default.json"
    )
  );
});

test("Submodel.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Submodel",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Submodel.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Submodel",
      "kindOrDefault.default.json"
    )
  );
});

test("RelationshipElement.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "RelationshipElement",
      "kindOrDefault.non-default.json"
    )
  );
});

test("RelationshipElement.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "RelationshipElement",
      "kindOrDefault.default.json"
    )
  );
});

test("SubmodelElementList.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementList",
      "kindOrDefault.non-default.json"
    )
  );
});

test("SubmodelElementList.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementList",
      "kindOrDefault.default.json"
    )
  );
});

test("SubmodelElementList.orderRelevantOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  const value = instance.orderRelevantOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementList",
      "orderRelevantOrDefault.non-default.json"
    )
  );
});

test("SubmodelElementList.orderRelevantOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  const value = instance.orderRelevantOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementList",
      "orderRelevantOrDefault.default.json"
    )
  );
});

test("SubmodelElementCollection.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementCollection",
      "kindOrDefault.non-default.json"
    )
  );
});

test("SubmodelElementCollection.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "SubmodelElementCollection",
      "kindOrDefault.default.json"
    )
  );
});

test("Property.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Property",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Property.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Property",
      "kindOrDefault.default.json"
    )
  );
});

test("Property.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Property",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("Property.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Property",
      "categoryOrDefault.default.json"
    )
  );
});

test("MultiLanguageProperty.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "MultiLanguageProperty",
      "kindOrDefault.non-default.json"
    )
  );
});

test("MultiLanguageProperty.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "MultiLanguageProperty",
      "kindOrDefault.default.json"
    )
  );
});

test("MultiLanguageProperty.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "MultiLanguageProperty",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("MultiLanguageProperty.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "MultiLanguageProperty",
      "categoryOrDefault.default.json"
    )
  );
});

test("Range.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Range",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Range.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Range",
      "kindOrDefault.default.json"
    )
  );
});

test("Range.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Range",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("Range.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Range",
      "categoryOrDefault.default.json"
    )
  );
});

test("ReferenceElement.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ReferenceElement",
      "kindOrDefault.non-default.json"
    )
  );
});

test("ReferenceElement.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ReferenceElement",
      "kindOrDefault.default.json"
    )
  );
});

test("ReferenceElement.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ReferenceElement",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("ReferenceElement.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ReferenceElement",
      "categoryOrDefault.default.json"
    )
  );
});

test("Blob.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Blob",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Blob.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Blob",
      "kindOrDefault.default.json"
    )
  );
});

test("Blob.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Blob",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("Blob.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Blob",
      "categoryOrDefault.default.json"
    )
  );
});

test("File.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "File",
      "kindOrDefault.non-default.json"
    )
  );
});

test("File.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "File",
      "kindOrDefault.default.json"
    )
  );
});

test("File.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "File",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("File.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "File",
      "categoryOrDefault.default.json"
    )
  );
});

test("AnnotatedRelationshipElement.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "AnnotatedRelationshipElement",
      "kindOrDefault.non-default.json"
    )
  );
});

test("AnnotatedRelationshipElement.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "AnnotatedRelationshipElement",
      "kindOrDefault.default.json"
    )
  );
});

test("Entity.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Entity",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Entity.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Entity",
      "kindOrDefault.default.json"
    )
  );
});

test("BasicEventElement.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "BasicEventElement",
      "kindOrDefault.non-default.json"
    )
  );
});

test("BasicEventElement.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "BasicEventElement",
      "kindOrDefault.default.json"
    )
  );
});

test("Operation.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Operation",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Operation.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Operation",
      "kindOrDefault.default.json"
    )
  );
});

test("Capability.kindOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Capability",
      "kindOrDefault.non-default.json"
    )
  );
});

test("Capability.kindOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  const value = new EnumerationLiteral(
    "ModelingKind",
    AasStringification.mustModelingKindToString(instance.kindOrDefault())
  );

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "Capability",
      "kindOrDefault.default.json"
    )
  );
});

test("ConceptDescription.categoryOrDefault with non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ConceptDescription",
      "categoryOrDefault.non-default.json"
    )
  );
});

test("ConceptDescription.categoryOrDefault with default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  const value = instance.categoryOrDefault();

  compareOrRecordValue(
    value,
    path.join(
      TestCommon.TEST_DATA_DIR,
      "xOrDefault",
      "ConceptDescription",
      "categoryOrDefault.default.json"
    )
  );
});
