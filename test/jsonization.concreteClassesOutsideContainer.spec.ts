/**
 * Test JSON de/serialization of concrete classes outside a container.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_jsonization_of_concrete_classes_outside_container.py
// Do NOT edit or append.

import * as AasJsonization from "../src/jsonization";
import * as TestCommon from "./common";
import * as TestCommonJsonization from "./commonJsonization";

test("Extension round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteExtension();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.extensionFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Extension serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("AdministrativeInformation round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteAdministrativeInformation();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.administrativeInformationFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of AdministrativeInformation serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Qualifier round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteQualifier();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.qualifierFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Qualifier serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("AssetAdministrationShell round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.assetAdministrationShellFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of AssetAdministrationShell serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("AssetInformation round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteAssetInformation();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.assetInformationFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of AssetInformation serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Resource round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteResource();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.resourceFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Resource serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("SpecificAssetId round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteSpecificAssetId();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.specificAssetIdFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of SpecificAssetId serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Submodel round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.submodelFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Submodel serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("RelationshipElement round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.relationshipElementFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of RelationshipElement serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("SubmodelElementList round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.submodelElementListFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of SubmodelElementList serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("SubmodelElementCollection round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.submodelElementCollectionFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of SubmodelElementCollection serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Property round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.propertyFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Property serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("MultiLanguageProperty round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.multiLanguagePropertyFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of MultiLanguageProperty serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Range round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.rangeFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Range serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("ReferenceElement round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.referenceElementFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of ReferenceElement serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Blob round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.blobFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Blob serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("File round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.fileFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of File serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("AnnotatedRelationshipElement round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.annotatedRelationshipElementFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of AnnotatedRelationshipElement serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Entity round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.entityFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Entity serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("BasicEventElement round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.basicEventElementFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of BasicEventElement serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Operation round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.operationFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Operation serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("OperationVariable round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteOperationVariable();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.operationVariableFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of OperationVariable serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Capability round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.capabilityFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Capability serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("ConceptDescription round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.conceptDescriptionFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of ConceptDescription serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Reference round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteReference();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.referenceFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Reference serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("Key round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteKey();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.keyFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of Key serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("LangString round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteLangString();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.langStringFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of LangString serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("EmbeddedDataSpecification round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteEmbeddedDataSpecification();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.embeddedDataSpecificationFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of EmbeddedDataSpecification serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("ValueReferencePair round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteValueReferencePair();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.valueReferencePairFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of ValueReferencePair serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("ValueList round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteValueList();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError = AasJsonization.valueListFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of ValueList serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("DataSpecificationIec61360 round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteDataSpecificationIec61360();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.dataSpecificationIec61360FromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of DataSpecificationIec61360 serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});

test("DataSpecificationPhysicalUnit round-trip OK", () => {
  const instance = TestCommonJsonization.loadCompleteDataSpecificationPhysicalUnit();

  const jsonable = AasJsonization.toJsonable(instance);

  const anotherInstanceOrError =
    AasJsonization.dataSpecificationPhysicalUnitFromJsonable(jsonable);
  expect(anotherInstanceOrError.error).toBeNull();
  const anotherInstance = anotherInstanceOrError.mustValue();

  const anotherJsonable = AasJsonization.toJsonable(anotherInstance);

  const inequalityError = TestCommon.checkJsonablesEqual(jsonable, anotherJsonable);
  if (inequalityError !== null) {
    throw new Error(
      "The complete example of DataSpecificationPhysicalUnit serialized " +
        "to JSON, then de-serialized and serialized again does not match " +
        `the first JSON: ${inequalityError.path}: ${inequalityError.message}`
    );
  }
});
