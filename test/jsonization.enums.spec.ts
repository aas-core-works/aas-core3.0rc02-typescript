/**
 * Test JSON de/serialization of enumeration literals.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_jsonization_of_enums.py
// Do NOT edit or append.

import * as AasJsonization from "../src/jsonization";
import * as AasTypes from "../src/types";

test("ModelingKind round-trip OK", () => {
  const jsonable = "Template";

  const literalOrError = AasJsonization.modelingKindFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.ModelingKind.Template);
});

test("ModelingKind deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.modelingKindFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of ModelingKind: invalid-literal"
  );
});

test("QualifierKind round-trip OK", () => {
  const jsonable = "ValueQualifier";

  const literalOrError = AasJsonization.qualifierKindFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.QualifierKind.ValueQualifier);
});

test("QualifierKind deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.qualifierKindFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of QualifierKind: invalid-literal"
  );
});

test("AssetKind round-trip OK", () => {
  const jsonable = "Type";

  const literalOrError = AasJsonization.assetKindFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.AssetKind.Type);
});

test("AssetKind deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.assetKindFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of AssetKind: invalid-literal"
  );
});

test("AasSubmodelElements round-trip OK", () => {
  const jsonable = "AnnotatedRelationshipElement";

  const literalOrError = AasJsonization.aasSubmodelElementsFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(
    AasTypes.AasSubmodelElements.AnnotatedRelationshipElement
  );
});

test("AasSubmodelElements deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.aasSubmodelElementsFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of AasSubmodelElements: invalid-literal"
  );
});

test("EntityType round-trip OK", () => {
  const jsonable = "CoManagedEntity";

  const literalOrError = AasJsonization.entityTypeFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.EntityType.CoManagedEntity);
});

test("EntityType deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.entityTypeFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of EntityType: invalid-literal"
  );
});

test("Direction round-trip OK", () => {
  const jsonable = "input";

  const literalOrError = AasJsonization.directionFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.Direction.Input);
});

test("Direction deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.directionFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of Direction: invalid-literal"
  );
});

test("StateOfEvent round-trip OK", () => {
  const jsonable = "on";

  const literalOrError = AasJsonization.stateOfEventFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.StateOfEvent.On);
});

test("StateOfEvent deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.stateOfEventFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of StateOfEvent: invalid-literal"
  );
});

test("ReferenceTypes round-trip OK", () => {
  const jsonable = "GlobalReference";

  const literalOrError = AasJsonization.referenceTypesFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.ReferenceTypes.GlobalReference);
});

test("ReferenceTypes deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.referenceTypesFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of ReferenceTypes: invalid-literal"
  );
});

test("KeyTypes round-trip OK", () => {
  const jsonable = "FragmentReference";

  const literalOrError = AasJsonization.keyTypesFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.KeyTypes.FragmentReference);
});

test("KeyTypes deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.keyTypesFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of KeyTypes: invalid-literal"
  );
});

test("DataTypeDefXsd round-trip OK", () => {
  const jsonable = "xs:anyURI";

  const literalOrError = AasJsonization.dataTypeDefXsdFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.DataTypeDefXsd.AnyUri);
});

test("DataTypeDefXsd deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.dataTypeDefXsdFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of DataTypeDefXsd: invalid-literal"
  );
});

test("DataTypeIec61360 round-trip OK", () => {
  const jsonable = "DATE";

  const literalOrError = AasJsonization.dataTypeIec61360FromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.DataTypeIec61360.Date);
});

test("DataTypeIec61360 deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.dataTypeIec61360FromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of DataTypeIec61360: invalid-literal"
  );
});

test("LevelType round-trip OK", () => {
  const jsonable = "Min";

  const literalOrError = AasJsonization.levelTypeFromJsonable(jsonable);

  expect(literalOrError.error).toBeNull();
  const literal = literalOrError.mustValue();

  expect(literal).toStrictEqual(AasTypes.LevelType.Min);
});

test("LevelType deserialization fail", () => {
  const jsonable = "invalid-literal";

  const literalOrError = AasJsonization.levelTypeFromJsonable(jsonable);

  expect(literalOrError.error.message).toStrictEqual(
    "Not a valid string representation of a literal of LevelType: invalid-literal"
  );
});
