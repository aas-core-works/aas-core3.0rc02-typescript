/**
 * Test `over*OrEmpty` methods.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_over_X_or_empty.py
// Do NOT edit or append.

import * as TestCommonJsonization from "./commonJsonization";

test("Extension.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalExtension();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Extension.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteExtension();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AdministrativeInformation.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAdministrativeInformation();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AdministrativeInformation.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAdministrativeInformation();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Qualifier.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalQualifier();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Qualifier.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteQualifier();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetAdministrationShell.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetAdministrationShell.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetAdministrationShell.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetAdministrationShell.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetAdministrationShell.overSubmodelsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetAdministrationShell.overSubmodelsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetAdministrationShell();

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AssetInformation.overSpecificAssetIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAssetInformation();

  let count = 0;
  for (const _ of instance.overSpecificAssetIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AssetInformation.overSpecificAssetIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAssetInformation();

  let count = 0;
  for (const _ of instance.overSpecificAssetIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SpecificAssetId.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSpecificAssetId();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SpecificAssetId.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSpecificAssetId();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Submodel.overSubmodelElementsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodel();

  let count = 0;
  for (const _ of instance.overSubmodelElementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Submodel.overSubmodelElementsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodel();

  let count = 0;
  for (const _ of instance.overSubmodelElementsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("RelationshipElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRelationshipElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("RelationshipElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRelationshipElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementList.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementList();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementList.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementList();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("SubmodelElementCollection.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("SubmodelElementCollection.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteSubmodelElementCollection();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Property.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalProperty();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Property.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteProperty();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("MultiLanguageProperty.overValueOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("MultiLanguageProperty.overValueOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteMultiLanguageProperty();

  let count = 0;
  for (const _ of instance.overValueOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Range.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalRange();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Range.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteRange();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ReferenceElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalReferenceElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ReferenceElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteReferenceElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Blob.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBlob();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Blob.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBlob();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("File.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalFile();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("File.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteFile();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("AnnotatedRelationshipElement.overAnnotationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overAnnotationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("AnnotatedRelationshipElement.overAnnotationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteAnnotatedRelationshipElement();

  let count = 0;
  for (const _ of instance.overAnnotationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Entity.overStatementsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEntity();

  let count = 0;
  for (const _ of instance.overStatementsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Entity.overStatementsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEntity();

  let count = 0;
  for (const _ of instance.overStatementsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("BasicEventElement.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalBasicEventElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("BasicEventElement.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteBasicEventElement();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overInputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overInputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overInputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overInputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overOutputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overOutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overOutputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overOutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Operation.overInoutputVariablesOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalOperation();

  let count = 0;
  for (const _ of instance.overInoutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Operation.overInoutputVariablesOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteOperation();

  let count = 0;
  for (const _ of instance.overInoutputVariablesOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overSupplementalSemanticIdsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overSupplementalSemanticIdsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overSupplementalSemanticIdsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overQualifiersOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overQualifiersOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overQualifiersOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Capability.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalCapability();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Capability.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteCapability();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ConceptDescription.overExtensionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overExtensionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  let count = 0;
  for (const _ of instance.overExtensionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ConceptDescription.overDisplayNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overDisplayNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  let count = 0;
  for (const _ of instance.overDisplayNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ConceptDescription.overDescriptionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overDescriptionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  let count = 0;
  for (const _ of instance.overDescriptionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ConceptDescription.overEmbeddedDataSpecificationsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overEmbeddedDataSpecificationsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  let count = 0;
  for (const _ of instance.overEmbeddedDataSpecificationsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("ConceptDescription.overIsCaseOfOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalConceptDescription();

  let count = 0;
  for (const _ of instance.overIsCaseOfOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("ConceptDescription.overIsCaseOfOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteConceptDescription();

  let count = 0;
  for (const _ of instance.overIsCaseOfOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Environment.overAssetAdministrationShellsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  let count = 0;
  for (const _ of instance.overAssetAdministrationShellsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overAssetAdministrationShellsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEnvironment();

  let count = 0;
  for (const _ of instance.overAssetAdministrationShellsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Environment.overSubmodelsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overSubmodelsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEnvironment();

  let count = 0;
  for (const _ of instance.overSubmodelsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("Environment.overConceptDescriptionsOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalEnvironment();

  let count = 0;
  for (const _ of instance.overConceptDescriptionsOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("Environment.overConceptDescriptionsOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteEnvironment();

  let count = 0;
  for (const _ of instance.overConceptDescriptionsOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("DataSpecificationIec61360.overShortNameOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  let count = 0;
  for (const _ of instance.overShortNameOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("DataSpecificationIec61360.overShortNameOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteDataSpecificationIec61360();

  let count = 0;
  for (const _ of instance.overShortNameOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

test("DataSpecificationIec61360.overDefinitionOrEmpty empty on default", () => {
  const instance = TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  let count = 0;
  for (const _ of instance.overDefinitionOrEmpty()) {
    count++;
  }

  expect(count).toStrictEqual(0);
});

test("DataSpecificationIec61360.overDefinitionOrEmpty non-default", () => {
  const instance = TestCommonJsonization.loadCompleteDataSpecificationIec61360();

  let count = 0;
  for (const _ of instance.overDefinitionOrEmpty()) {
    count++;
  }

  expect(count).toBeGreaterThan(0);
});

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_over_X_or_empty.py
// Do NOT edit or append.
