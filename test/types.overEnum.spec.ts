/**
 * Test `over{Enum}` functions.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_over_enum.py
// Do NOT edit or append.

import * as AasTypes from "../src/types";

test("over ModelingKind", () => {
  const expected: Array<AasTypes.ModelingKind> = [
    AasTypes.ModelingKind.Template,
    AasTypes.ModelingKind.Instance
  ];

  const got = new Array<AasTypes.ModelingKind>();
  for (const literal of AasTypes.overModelingKind()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over QualifierKind", () => {
  const expected: Array<AasTypes.QualifierKind> = [
    AasTypes.QualifierKind.ValueQualifier,
    AasTypes.QualifierKind.ConceptQualifier,
    AasTypes.QualifierKind.TemplateQualifier
  ];

  const got = new Array<AasTypes.QualifierKind>();
  for (const literal of AasTypes.overQualifierKind()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over AssetKind", () => {
  const expected: Array<AasTypes.AssetKind> = [
    AasTypes.AssetKind.Type,
    AasTypes.AssetKind.Instance
  ];

  const got = new Array<AasTypes.AssetKind>();
  for (const literal of AasTypes.overAssetKind()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over AasSubmodelElements", () => {
  const expected: Array<AasTypes.AasSubmodelElements> = [
    AasTypes.AasSubmodelElements.AnnotatedRelationshipElement,
    AasTypes.AasSubmodelElements.BasicEventElement,
    AasTypes.AasSubmodelElements.Blob,
    AasTypes.AasSubmodelElements.Capability,
    AasTypes.AasSubmodelElements.DataElement,
    AasTypes.AasSubmodelElements.Entity,
    AasTypes.AasSubmodelElements.EventElement,
    AasTypes.AasSubmodelElements.File,
    AasTypes.AasSubmodelElements.MultiLanguageProperty,
    AasTypes.AasSubmodelElements.Operation,
    AasTypes.AasSubmodelElements.Property,
    AasTypes.AasSubmodelElements.Range,
    AasTypes.AasSubmodelElements.ReferenceElement,
    AasTypes.AasSubmodelElements.RelationshipElement,
    AasTypes.AasSubmodelElements.SubmodelElement,
    AasTypes.AasSubmodelElements.SubmodelElementList,
    AasTypes.AasSubmodelElements.SubmodelElementCollection
  ];

  const got = new Array<AasTypes.AasSubmodelElements>();
  for (const literal of AasTypes.overAasSubmodelElements()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over EntityType", () => {
  const expected: Array<AasTypes.EntityType> = [
    AasTypes.EntityType.CoManagedEntity,
    AasTypes.EntityType.SelfManagedEntity
  ];

  const got = new Array<AasTypes.EntityType>();
  for (const literal of AasTypes.overEntityType()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over Direction", () => {
  const expected: Array<AasTypes.Direction> = [
    AasTypes.Direction.Input,
    AasTypes.Direction.Output
  ];

  const got = new Array<AasTypes.Direction>();
  for (const literal of AasTypes.overDirection()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over StateOfEvent", () => {
  const expected: Array<AasTypes.StateOfEvent> = [
    AasTypes.StateOfEvent.On,
    AasTypes.StateOfEvent.Off
  ];

  const got = new Array<AasTypes.StateOfEvent>();
  for (const literal of AasTypes.overStateOfEvent()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over ReferenceTypes", () => {
  const expected: Array<AasTypes.ReferenceTypes> = [
    AasTypes.ReferenceTypes.GlobalReference,
    AasTypes.ReferenceTypes.ModelReference
  ];

  const got = new Array<AasTypes.ReferenceTypes>();
  for (const literal of AasTypes.overReferenceTypes()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over KeyTypes", () => {
  const expected: Array<AasTypes.KeyTypes> = [
    AasTypes.KeyTypes.FragmentReference,
    AasTypes.KeyTypes.GlobalReference,
    AasTypes.KeyTypes.AnnotatedRelationshipElement,
    AasTypes.KeyTypes.AssetAdministrationShell,
    AasTypes.KeyTypes.BasicEventElement,
    AasTypes.KeyTypes.Blob,
    AasTypes.KeyTypes.Capability,
    AasTypes.KeyTypes.ConceptDescription,
    AasTypes.KeyTypes.Identifiable,
    AasTypes.KeyTypes.DataElement,
    AasTypes.KeyTypes.Entity,
    AasTypes.KeyTypes.EventElement,
    AasTypes.KeyTypes.File,
    AasTypes.KeyTypes.MultiLanguageProperty,
    AasTypes.KeyTypes.Operation,
    AasTypes.KeyTypes.Property,
    AasTypes.KeyTypes.Range,
    AasTypes.KeyTypes.ReferenceElement,
    AasTypes.KeyTypes.Referable,
    AasTypes.KeyTypes.RelationshipElement,
    AasTypes.KeyTypes.Submodel,
    AasTypes.KeyTypes.SubmodelElement,
    AasTypes.KeyTypes.SubmodelElementList,
    AasTypes.KeyTypes.SubmodelElementCollection
  ];

  const got = new Array<AasTypes.KeyTypes>();
  for (const literal of AasTypes.overKeyTypes()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over DataTypeDefXsd", () => {
  const expected: Array<AasTypes.DataTypeDefXsd> = [
    AasTypes.DataTypeDefXsd.AnyUri,
    AasTypes.DataTypeDefXsd.Base64Binary,
    AasTypes.DataTypeDefXsd.Boolean,
    AasTypes.DataTypeDefXsd.Date,
    AasTypes.DataTypeDefXsd.DateTime,
    AasTypes.DataTypeDefXsd.DateTimeStamp,
    AasTypes.DataTypeDefXsd.Decimal,
    AasTypes.DataTypeDefXsd.Double,
    AasTypes.DataTypeDefXsd.Duration,
    AasTypes.DataTypeDefXsd.Float,
    AasTypes.DataTypeDefXsd.GDay,
    AasTypes.DataTypeDefXsd.GMonth,
    AasTypes.DataTypeDefXsd.GMonthDay,
    AasTypes.DataTypeDefXsd.GYear,
    AasTypes.DataTypeDefXsd.GYearMonth,
    AasTypes.DataTypeDefXsd.HexBinary,
    AasTypes.DataTypeDefXsd.String,
    AasTypes.DataTypeDefXsd.Time,
    AasTypes.DataTypeDefXsd.DayTimeDuration,
    AasTypes.DataTypeDefXsd.YearMonthDuration,
    AasTypes.DataTypeDefXsd.Integer,
    AasTypes.DataTypeDefXsd.Long,
    AasTypes.DataTypeDefXsd.Int,
    AasTypes.DataTypeDefXsd.Short,
    AasTypes.DataTypeDefXsd.Byte,
    AasTypes.DataTypeDefXsd.NonNegativeInteger,
    AasTypes.DataTypeDefXsd.PositiveInteger,
    AasTypes.DataTypeDefXsd.UnsignedLong,
    AasTypes.DataTypeDefXsd.UnsignedInt,
    AasTypes.DataTypeDefXsd.UnsignedShort,
    AasTypes.DataTypeDefXsd.UnsignedByte,
    AasTypes.DataTypeDefXsd.NonPositiveInteger,
    AasTypes.DataTypeDefXsd.NegativeInteger
  ];

  const got = new Array<AasTypes.DataTypeDefXsd>();
  for (const literal of AasTypes.overDataTypeDefXsd()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over DataTypeIec61360", () => {
  const expected: Array<AasTypes.DataTypeIec61360> = [
    AasTypes.DataTypeIec61360.Date,
    AasTypes.DataTypeIec61360.String,
    AasTypes.DataTypeIec61360.StringTranslatable,
    AasTypes.DataTypeIec61360.IntegerMeasure,
    AasTypes.DataTypeIec61360.IntegerCount,
    AasTypes.DataTypeIec61360.IntegerCurrency,
    AasTypes.DataTypeIec61360.RealMeasure,
    AasTypes.DataTypeIec61360.RealCount,
    AasTypes.DataTypeIec61360.RealCurrency,
    AasTypes.DataTypeIec61360.Boolean,
    AasTypes.DataTypeIec61360.Iri,
    AasTypes.DataTypeIec61360.Irdi,
    AasTypes.DataTypeIec61360.Rational,
    AasTypes.DataTypeIec61360.RationalMeasure,
    AasTypes.DataTypeIec61360.Time,
    AasTypes.DataTypeIec61360.Timestamp,
    AasTypes.DataTypeIec61360.File,
    AasTypes.DataTypeIec61360.Html,
    AasTypes.DataTypeIec61360.Blob
  ];

  const got = new Array<AasTypes.DataTypeIec61360>();
  for (const literal of AasTypes.overDataTypeIec61360()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

test("over LevelType", () => {
  const expected: Array<AasTypes.LevelType> = [
    AasTypes.LevelType.Min,
    AasTypes.LevelType.Max,
    AasTypes.LevelType.Nom,
    AasTypes.LevelType.Typ
  ];

  const got = new Array<AasTypes.LevelType>();
  for (const literal of AasTypes.overLevelType()) {
    got.push(literal);
  }

  expect(got).toStrictEqual(expected);
});

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_over_enum.py
// Do NOT edit or append.
