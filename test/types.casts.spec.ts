/**
 * Test `as*` and `is*` functions.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_casts.py
// Do NOT edit or append.

import * as AasTypes from "../src/types";
import * as TestCommonJsonization from "./commonJsonization";

test("casts over an instance of Extension", () => {
  const theExtension = TestCommonJsonization.loadMinimalExtension();

  expect(AasTypes.isHasSemantics(theExtension)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theExtension)).toStrictEqual(theExtension);

  expect(AasTypes.isExtension(theExtension)).toStrictEqual(true);
  expect(AasTypes.asExtension(theExtension)).toStrictEqual(theExtension);

  expect(AasTypes.isHasExtensions(theExtension)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theExtension)).toBeNull();

  expect(AasTypes.isReferable(theExtension)).toStrictEqual(false);
  expect(AasTypes.asReferable(theExtension)).toBeNull();

  expect(AasTypes.isIdentifiable(theExtension)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theExtension)).toBeNull();

  expect(AasTypes.isHasKind(theExtension)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theExtension)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theExtension)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theExtension)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theExtension)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theExtension)).toBeNull();

  expect(AasTypes.isQualifiable(theExtension)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theExtension)).toBeNull();

  expect(AasTypes.isQualifier(theExtension)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theExtension)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theExtension)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theExtension)).toBeNull();

  expect(AasTypes.isAssetInformation(theExtension)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theExtension)).toBeNull();

  expect(AasTypes.isResource(theExtension)).toStrictEqual(false);
  expect(AasTypes.asResource(theExtension)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theExtension)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theExtension)).toBeNull();

  expect(AasTypes.isSubmodel(theExtension)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theExtension)).toBeNull();

  expect(AasTypes.isSubmodelElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theExtension)).toBeNull();

  expect(AasTypes.isRelationshipElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theExtension)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theExtension)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theExtension)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theExtension)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theExtension)).toBeNull();

  expect(AasTypes.isDataElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theExtension)).toBeNull();

  expect(AasTypes.isProperty(theExtension)).toStrictEqual(false);
  expect(AasTypes.asProperty(theExtension)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theExtension)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theExtension)).toBeNull();

  expect(AasTypes.isRange(theExtension)).toStrictEqual(false);
  expect(AasTypes.asRange(theExtension)).toBeNull();

  expect(AasTypes.isReferenceElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theExtension)).toBeNull();

  expect(AasTypes.isBlob(theExtension)).toStrictEqual(false);
  expect(AasTypes.asBlob(theExtension)).toBeNull();

  expect(AasTypes.isFile(theExtension)).toStrictEqual(false);
  expect(AasTypes.asFile(theExtension)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theExtension)).toBeNull();

  expect(AasTypes.isEntity(theExtension)).toStrictEqual(false);
  expect(AasTypes.asEntity(theExtension)).toBeNull();

  expect(AasTypes.isEventPayload(theExtension)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theExtension)).toBeNull();

  expect(AasTypes.isEventElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theExtension)).toBeNull();

  expect(AasTypes.isBasicEventElement(theExtension)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theExtension)).toBeNull();

  expect(AasTypes.isOperation(theExtension)).toStrictEqual(false);
  expect(AasTypes.asOperation(theExtension)).toBeNull();

  expect(AasTypes.isOperationVariable(theExtension)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theExtension)).toBeNull();

  expect(AasTypes.isCapability(theExtension)).toStrictEqual(false);
  expect(AasTypes.asCapability(theExtension)).toBeNull();

  expect(AasTypes.isConceptDescription(theExtension)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theExtension)).toBeNull();

  expect(AasTypes.isReference(theExtension)).toStrictEqual(false);
  expect(AasTypes.asReference(theExtension)).toBeNull();

  expect(AasTypes.isKey(theExtension)).toStrictEqual(false);
  expect(AasTypes.asKey(theExtension)).toBeNull();

  expect(AasTypes.isLangString(theExtension)).toStrictEqual(false);
  expect(AasTypes.asLangString(theExtension)).toBeNull();

  expect(AasTypes.isEnvironment(theExtension)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theExtension)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theExtension)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theExtension)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theExtension)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theExtension)).toBeNull();

  expect(AasTypes.isValueReferencePair(theExtension)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theExtension)).toBeNull();

  expect(AasTypes.isValueList(theExtension)).toStrictEqual(false);
  expect(AasTypes.asValueList(theExtension)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theExtension)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theExtension)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theExtension)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theExtension)).toBeNull();
});

test("casts over an instance of AdministrativeInformation", () => {
  const theAdministrativeInformation =
    TestCommonJsonization.loadMinimalAdministrativeInformation();

  expect(AasTypes.isHasSemantics(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isExtension(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asExtension(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isHasExtensions(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isReferable(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asReferable(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isIdentifiable(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isHasKind(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theAdministrativeInformation)).toStrictEqual(
    true
  );
  expect(AasTypes.asHasDataSpecification(theAdministrativeInformation)).toStrictEqual(
    theAdministrativeInformation
  );

  expect(
    AasTypes.isAdministrativeInformation(theAdministrativeInformation)
  ).toStrictEqual(true);
  expect(
    AasTypes.asAdministrativeInformation(theAdministrativeInformation)
  ).toStrictEqual(theAdministrativeInformation);

  expect(AasTypes.isQualifiable(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isQualifier(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isAssetInformation(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isResource(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asResource(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isSubmodel(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isSubmodelElement(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isRelationshipElement(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asRelationshipElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isDataElement(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isProperty(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asProperty(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asMultiLanguageProperty(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isRange(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asRange(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isReferenceElement(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isBlob(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asBlob(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isFile(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asFile(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theAdministrativeInformation)
  ).toBeNull();

  expect(AasTypes.isEntity(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asEntity(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isEventPayload(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isEventElement(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isBasicEventElement(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isOperation(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asOperation(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isOperationVariable(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isCapability(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asCapability(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isConceptDescription(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isReference(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asReference(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isKey(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asKey(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isLangString(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asLangString(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isEnvironment(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isEmbeddedDataSpecification(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isValueReferencePair(theAdministrativeInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theAdministrativeInformation)).toBeNull();

  expect(AasTypes.isValueList(theAdministrativeInformation)).toStrictEqual(false);
  expect(AasTypes.asValueList(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theAdministrativeInformation)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theAdministrativeInformation)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theAdministrativeInformation)
  ).toBeNull();
});

test("casts over an instance of Qualifier", () => {
  const theQualifier = TestCommonJsonization.loadMinimalQualifier();

  expect(AasTypes.isHasSemantics(theQualifier)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theQualifier)).toStrictEqual(theQualifier);

  expect(AasTypes.isExtension(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asExtension(theQualifier)).toBeNull();

  expect(AasTypes.isHasExtensions(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theQualifier)).toBeNull();

  expect(AasTypes.isReferable(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asReferable(theQualifier)).toBeNull();

  expect(AasTypes.isIdentifiable(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theQualifier)).toBeNull();

  expect(AasTypes.isHasKind(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theQualifier)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theQualifier)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theQualifier)).toBeNull();

  expect(AasTypes.isQualifiable(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theQualifier)).toBeNull();

  expect(AasTypes.isQualifier(theQualifier)).toStrictEqual(true);
  expect(AasTypes.asQualifier(theQualifier)).toStrictEqual(theQualifier);

  expect(AasTypes.isAssetAdministrationShell(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theQualifier)).toBeNull();

  expect(AasTypes.isAssetInformation(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theQualifier)).toBeNull();

  expect(AasTypes.isResource(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asResource(theQualifier)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theQualifier)).toBeNull();

  expect(AasTypes.isSubmodel(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theQualifier)).toBeNull();

  expect(AasTypes.isSubmodelElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theQualifier)).toBeNull();

  expect(AasTypes.isRelationshipElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theQualifier)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theQualifier)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theQualifier)).toBeNull();

  expect(AasTypes.isDataElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theQualifier)).toBeNull();

  expect(AasTypes.isProperty(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asProperty(theQualifier)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theQualifier)).toBeNull();

  expect(AasTypes.isRange(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asRange(theQualifier)).toBeNull();

  expect(AasTypes.isReferenceElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theQualifier)).toBeNull();

  expect(AasTypes.isBlob(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asBlob(theQualifier)).toBeNull();

  expect(AasTypes.isFile(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asFile(theQualifier)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theQualifier)).toBeNull();

  expect(AasTypes.isEntity(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asEntity(theQualifier)).toBeNull();

  expect(AasTypes.isEventPayload(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theQualifier)).toBeNull();

  expect(AasTypes.isEventElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theQualifier)).toBeNull();

  expect(AasTypes.isBasicEventElement(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theQualifier)).toBeNull();

  expect(AasTypes.isOperation(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asOperation(theQualifier)).toBeNull();

  expect(AasTypes.isOperationVariable(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theQualifier)).toBeNull();

  expect(AasTypes.isCapability(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asCapability(theQualifier)).toBeNull();

  expect(AasTypes.isConceptDescription(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theQualifier)).toBeNull();

  expect(AasTypes.isReference(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asReference(theQualifier)).toBeNull();

  expect(AasTypes.isKey(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asKey(theQualifier)).toBeNull();

  expect(AasTypes.isLangString(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asLangString(theQualifier)).toBeNull();

  expect(AasTypes.isEnvironment(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theQualifier)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theQualifier)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theQualifier)).toBeNull();

  expect(AasTypes.isValueReferencePair(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theQualifier)).toBeNull();

  expect(AasTypes.isValueList(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asValueList(theQualifier)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theQualifier)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theQualifier)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theQualifier)).toBeNull();
});

test("casts over an instance of AssetAdministrationShell", () => {
  const theAssetAdministrationShell =
    TestCommonJsonization.loadMinimalAssetAdministrationShell();

  expect(AasTypes.isHasSemantics(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isExtension(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asExtension(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isHasExtensions(theAssetAdministrationShell)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theAssetAdministrationShell)).toStrictEqual(
    theAssetAdministrationShell
  );

  expect(AasTypes.isReferable(theAssetAdministrationShell)).toStrictEqual(true);
  expect(AasTypes.asReferable(theAssetAdministrationShell)).toStrictEqual(
    theAssetAdministrationShell
  );

  expect(AasTypes.isIdentifiable(theAssetAdministrationShell)).toStrictEqual(true);
  expect(AasTypes.asIdentifiable(theAssetAdministrationShell)).toStrictEqual(
    theAssetAdministrationShell
  );

  expect(AasTypes.isHasKind(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theAssetAdministrationShell)).toStrictEqual(
    true
  );
  expect(AasTypes.asHasDataSpecification(theAssetAdministrationShell)).toStrictEqual(
    theAssetAdministrationShell
  );

  expect(
    AasTypes.isAdministrativeInformation(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isQualifiable(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isQualifier(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theAssetAdministrationShell)
  ).toStrictEqual(true);
  expect(
    AasTypes.asAssetAdministrationShell(theAssetAdministrationShell)
  ).toStrictEqual(theAssetAdministrationShell);

  expect(AasTypes.isAssetInformation(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isResource(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asResource(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isSubmodel(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isSubmodelElement(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isRelationshipElement(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asRelationshipElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isDataElement(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isProperty(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asProperty(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asMultiLanguageProperty(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isRange(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asRange(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isReferenceElement(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isBlob(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asBlob(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isFile(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asFile(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theAssetAdministrationShell)
  ).toBeNull();

  expect(AasTypes.isEntity(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asEntity(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isEventPayload(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isEventElement(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isBasicEventElement(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isOperation(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asOperation(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isOperationVariable(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isCapability(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asCapability(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isConceptDescription(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isReference(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asReference(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isKey(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asKey(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isLangString(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asLangString(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isEnvironment(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isEmbeddedDataSpecification(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isValueReferencePair(theAssetAdministrationShell)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theAssetAdministrationShell)).toBeNull();

  expect(AasTypes.isValueList(theAssetAdministrationShell)).toStrictEqual(false);
  expect(AasTypes.asValueList(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theAssetAdministrationShell)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theAssetAdministrationShell)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theAssetAdministrationShell)
  ).toBeNull();
});

test("casts over an instance of AssetInformation", () => {
  const theAssetInformation = TestCommonJsonization.loadMinimalAssetInformation();

  expect(AasTypes.isHasSemantics(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theAssetInformation)).toBeNull();

  expect(AasTypes.isExtension(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asExtension(theAssetInformation)).toBeNull();

  expect(AasTypes.isHasExtensions(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theAssetInformation)).toBeNull();

  expect(AasTypes.isReferable(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asReferable(theAssetInformation)).toBeNull();

  expect(AasTypes.isIdentifiable(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theAssetInformation)).toBeNull();

  expect(AasTypes.isHasKind(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theAssetInformation)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theAssetInformation)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theAssetInformation)).toBeNull();

  expect(AasTypes.isQualifiable(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theAssetInformation)).toBeNull();

  expect(AasTypes.isQualifier(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theAssetInformation)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theAssetInformation)).toBeNull();

  expect(AasTypes.isAssetInformation(theAssetInformation)).toStrictEqual(true);
  expect(AasTypes.asAssetInformation(theAssetInformation)).toStrictEqual(
    theAssetInformation
  );

  expect(AasTypes.isResource(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asResource(theAssetInformation)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theAssetInformation)).toBeNull();

  expect(AasTypes.isSubmodel(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theAssetInformation)).toBeNull();

  expect(AasTypes.isSubmodelElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isRelationshipElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theAssetInformation)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theAssetInformation)).toBeNull();

  expect(AasTypes.isDataElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isProperty(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asProperty(theAssetInformation)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theAssetInformation)).toBeNull();

  expect(AasTypes.isRange(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asRange(theAssetInformation)).toBeNull();

  expect(AasTypes.isReferenceElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isBlob(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asBlob(theAssetInformation)).toBeNull();

  expect(AasTypes.isFile(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asFile(theAssetInformation)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isEntity(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asEntity(theAssetInformation)).toBeNull();

  expect(AasTypes.isEventPayload(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theAssetInformation)).toBeNull();

  expect(AasTypes.isEventElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isBasicEventElement(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theAssetInformation)).toBeNull();

  expect(AasTypes.isOperation(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asOperation(theAssetInformation)).toBeNull();

  expect(AasTypes.isOperationVariable(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theAssetInformation)).toBeNull();

  expect(AasTypes.isCapability(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asCapability(theAssetInformation)).toBeNull();

  expect(AasTypes.isConceptDescription(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theAssetInformation)).toBeNull();

  expect(AasTypes.isReference(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asReference(theAssetInformation)).toBeNull();

  expect(AasTypes.isKey(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asKey(theAssetInformation)).toBeNull();

  expect(AasTypes.isLangString(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asLangString(theAssetInformation)).toBeNull();

  expect(AasTypes.isEnvironment(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theAssetInformation)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theAssetInformation)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theAssetInformation)).toBeNull();

  expect(AasTypes.isValueReferencePair(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theAssetInformation)).toBeNull();

  expect(AasTypes.isValueList(theAssetInformation)).toStrictEqual(false);
  expect(AasTypes.asValueList(theAssetInformation)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theAssetInformation)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theAssetInformation)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theAssetInformation)).toBeNull();
});

test("casts over an instance of Resource", () => {
  const theResource = TestCommonJsonization.loadMinimalResource();

  expect(AasTypes.isHasSemantics(theResource)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theResource)).toBeNull();

  expect(AasTypes.isExtension(theResource)).toStrictEqual(false);
  expect(AasTypes.asExtension(theResource)).toBeNull();

  expect(AasTypes.isHasExtensions(theResource)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theResource)).toBeNull();

  expect(AasTypes.isReferable(theResource)).toStrictEqual(false);
  expect(AasTypes.asReferable(theResource)).toBeNull();

  expect(AasTypes.isIdentifiable(theResource)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theResource)).toBeNull();

  expect(AasTypes.isHasKind(theResource)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theResource)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theResource)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theResource)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theResource)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theResource)).toBeNull();

  expect(AasTypes.isQualifiable(theResource)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theResource)).toBeNull();

  expect(AasTypes.isQualifier(theResource)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theResource)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theResource)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theResource)).toBeNull();

  expect(AasTypes.isAssetInformation(theResource)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theResource)).toBeNull();

  expect(AasTypes.isResource(theResource)).toStrictEqual(true);
  expect(AasTypes.asResource(theResource)).toStrictEqual(theResource);

  expect(AasTypes.isSpecificAssetId(theResource)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theResource)).toBeNull();

  expect(AasTypes.isSubmodel(theResource)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theResource)).toBeNull();

  expect(AasTypes.isSubmodelElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theResource)).toBeNull();

  expect(AasTypes.isRelationshipElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theResource)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theResource)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theResource)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theResource)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theResource)).toBeNull();

  expect(AasTypes.isDataElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theResource)).toBeNull();

  expect(AasTypes.isProperty(theResource)).toStrictEqual(false);
  expect(AasTypes.asProperty(theResource)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theResource)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theResource)).toBeNull();

  expect(AasTypes.isRange(theResource)).toStrictEqual(false);
  expect(AasTypes.asRange(theResource)).toBeNull();

  expect(AasTypes.isReferenceElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theResource)).toBeNull();

  expect(AasTypes.isBlob(theResource)).toStrictEqual(false);
  expect(AasTypes.asBlob(theResource)).toBeNull();

  expect(AasTypes.isFile(theResource)).toStrictEqual(false);
  expect(AasTypes.asFile(theResource)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theResource)).toBeNull();

  expect(AasTypes.isEntity(theResource)).toStrictEqual(false);
  expect(AasTypes.asEntity(theResource)).toBeNull();

  expect(AasTypes.isEventPayload(theResource)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theResource)).toBeNull();

  expect(AasTypes.isEventElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theResource)).toBeNull();

  expect(AasTypes.isBasicEventElement(theResource)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theResource)).toBeNull();

  expect(AasTypes.isOperation(theResource)).toStrictEqual(false);
  expect(AasTypes.asOperation(theResource)).toBeNull();

  expect(AasTypes.isOperationVariable(theResource)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theResource)).toBeNull();

  expect(AasTypes.isCapability(theResource)).toStrictEqual(false);
  expect(AasTypes.asCapability(theResource)).toBeNull();

  expect(AasTypes.isConceptDescription(theResource)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theResource)).toBeNull();

  expect(AasTypes.isReference(theResource)).toStrictEqual(false);
  expect(AasTypes.asReference(theResource)).toBeNull();

  expect(AasTypes.isKey(theResource)).toStrictEqual(false);
  expect(AasTypes.asKey(theResource)).toBeNull();

  expect(AasTypes.isLangString(theResource)).toStrictEqual(false);
  expect(AasTypes.asLangString(theResource)).toBeNull();

  expect(AasTypes.isEnvironment(theResource)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theResource)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theResource)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theResource)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theResource)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theResource)).toBeNull();

  expect(AasTypes.isValueReferencePair(theResource)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theResource)).toBeNull();

  expect(AasTypes.isValueList(theResource)).toStrictEqual(false);
  expect(AasTypes.asValueList(theResource)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theResource)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theResource)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theResource)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theResource)).toBeNull();
});

test("casts over an instance of SpecificAssetId", () => {
  const theSpecificAssetId = TestCommonJsonization.loadMinimalSpecificAssetId();

  expect(AasTypes.isHasSemantics(theSpecificAssetId)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theSpecificAssetId)).toStrictEqual(theSpecificAssetId);

  expect(AasTypes.isExtension(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asExtension(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isHasExtensions(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isReferable(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asReferable(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isIdentifiable(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isHasKind(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isQualifiable(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isQualifier(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isAssetInformation(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isResource(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asResource(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theSpecificAssetId)).toStrictEqual(true);
  expect(AasTypes.asSpecificAssetId(theSpecificAssetId)).toStrictEqual(
    theSpecificAssetId
  );

  expect(AasTypes.isSubmodel(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isSubmodelElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isRelationshipElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isDataElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isProperty(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asProperty(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isRange(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asRange(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isReferenceElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isBlob(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asBlob(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isFile(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asFile(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theSpecificAssetId)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isEntity(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asEntity(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isEventPayload(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isEventElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isBasicEventElement(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isOperation(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asOperation(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isOperationVariable(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isCapability(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asCapability(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isConceptDescription(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isReference(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asReference(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isKey(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asKey(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isLangString(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asLangString(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isEnvironment(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isValueReferencePair(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isValueList(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asValueList(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theSpecificAssetId)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theSpecificAssetId)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theSpecificAssetId)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theSpecificAssetId)).toBeNull();
});

test("casts over an instance of Submodel", () => {
  const theSubmodel = TestCommonJsonization.loadMinimalSubmodel();

  expect(AasTypes.isHasSemantics(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isExtension(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asExtension(theSubmodel)).toBeNull();

  expect(AasTypes.isHasExtensions(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isReferable(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asReferable(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isIdentifiable(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asIdentifiable(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isHasKind(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isHasDataSpecification(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isAdministrativeInformation(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theSubmodel)).toBeNull();

  expect(AasTypes.isQualifiable(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isQualifier(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theSubmodel)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theSubmodel)).toBeNull();

  expect(AasTypes.isAssetInformation(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theSubmodel)).toBeNull();

  expect(AasTypes.isResource(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asResource(theSubmodel)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theSubmodel)).toBeNull();

  expect(AasTypes.isSubmodel(theSubmodel)).toStrictEqual(true);
  expect(AasTypes.asSubmodel(theSubmodel)).toStrictEqual(theSubmodel);

  expect(AasTypes.isSubmodelElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theSubmodel)).toBeNull();

  expect(AasTypes.isRelationshipElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theSubmodel)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theSubmodel)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theSubmodel)).toBeNull();

  expect(AasTypes.isDataElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theSubmodel)).toBeNull();

  expect(AasTypes.isProperty(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asProperty(theSubmodel)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theSubmodel)).toBeNull();

  expect(AasTypes.isRange(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asRange(theSubmodel)).toBeNull();

  expect(AasTypes.isReferenceElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theSubmodel)).toBeNull();

  expect(AasTypes.isBlob(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asBlob(theSubmodel)).toBeNull();

  expect(AasTypes.isFile(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asFile(theSubmodel)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theSubmodel)).toBeNull();

  expect(AasTypes.isEntity(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asEntity(theSubmodel)).toBeNull();

  expect(AasTypes.isEventPayload(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theSubmodel)).toBeNull();

  expect(AasTypes.isEventElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theSubmodel)).toBeNull();

  expect(AasTypes.isBasicEventElement(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theSubmodel)).toBeNull();

  expect(AasTypes.isOperation(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asOperation(theSubmodel)).toBeNull();

  expect(AasTypes.isOperationVariable(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theSubmodel)).toBeNull();

  expect(AasTypes.isCapability(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asCapability(theSubmodel)).toBeNull();

  expect(AasTypes.isConceptDescription(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theSubmodel)).toBeNull();

  expect(AasTypes.isReference(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asReference(theSubmodel)).toBeNull();

  expect(AasTypes.isKey(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asKey(theSubmodel)).toBeNull();

  expect(AasTypes.isLangString(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asLangString(theSubmodel)).toBeNull();

  expect(AasTypes.isEnvironment(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theSubmodel)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theSubmodel)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theSubmodel)).toBeNull();

  expect(AasTypes.isValueReferencePair(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theSubmodel)).toBeNull();

  expect(AasTypes.isValueList(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asValueList(theSubmodel)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theSubmodel)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theSubmodel)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theSubmodel)).toBeNull();
});

test("casts over an instance of RelationshipElement", () => {
  const theRelationshipElement = TestCommonJsonization.loadMinimalRelationshipElement();

  expect(AasTypes.isHasSemantics(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isExtension(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asExtension(theRelationshipElement)).toBeNull();

  expect(AasTypes.isHasExtensions(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isReferable(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asReferable(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isIdentifiable(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theRelationshipElement)).toBeNull();

  expect(AasTypes.isHasKind(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isHasDataSpecification(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isAdministrativeInformation(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theRelationshipElement)).toBeNull();

  expect(AasTypes.isQualifiable(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isQualifier(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theRelationshipElement)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theRelationshipElement)).toBeNull();

  expect(AasTypes.isAssetInformation(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theRelationshipElement)).toBeNull();

  expect(AasTypes.isResource(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asResource(theRelationshipElement)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theRelationshipElement)).toBeNull();

  expect(AasTypes.isSubmodel(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theRelationshipElement)).toBeNull();

  expect(AasTypes.isSubmodelElement(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isRelationshipElement(theRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asRelationshipElement(theRelationshipElement)).toStrictEqual(
    theRelationshipElement
  );

  expect(AasTypes.isSubmodelElementList(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theRelationshipElement)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theRelationshipElement)).toBeNull();

  expect(AasTypes.isDataElement(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theRelationshipElement)).toBeNull();

  expect(AasTypes.isProperty(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asProperty(theRelationshipElement)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theRelationshipElement)).toBeNull();

  expect(AasTypes.isRange(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asRange(theRelationshipElement)).toBeNull();

  expect(AasTypes.isReferenceElement(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theRelationshipElement)).toBeNull();

  expect(AasTypes.isBlob(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asBlob(theRelationshipElement)).toBeNull();

  expect(AasTypes.isFile(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asFile(theRelationshipElement)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theRelationshipElement)).toBeNull();

  expect(AasTypes.isEntity(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEntity(theRelationshipElement)).toBeNull();

  expect(AasTypes.isEventPayload(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theRelationshipElement)).toBeNull();

  expect(AasTypes.isEventElement(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theRelationshipElement)).toBeNull();

  expect(AasTypes.isBasicEventElement(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theRelationshipElement)).toBeNull();

  expect(AasTypes.isOperation(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asOperation(theRelationshipElement)).toBeNull();

  expect(AasTypes.isOperationVariable(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theRelationshipElement)).toBeNull();

  expect(AasTypes.isCapability(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asCapability(theRelationshipElement)).toBeNull();

  expect(AasTypes.isConceptDescription(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theRelationshipElement)).toBeNull();

  expect(AasTypes.isReference(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asReference(theRelationshipElement)).toBeNull();

  expect(AasTypes.isKey(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asKey(theRelationshipElement)).toBeNull();

  expect(AasTypes.isLangString(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asLangString(theRelationshipElement)).toBeNull();

  expect(AasTypes.isEnvironment(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theRelationshipElement)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theRelationshipElement)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theRelationshipElement)).toBeNull();

  expect(AasTypes.isValueReferencePair(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theRelationshipElement)).toBeNull();

  expect(AasTypes.isValueList(theRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asValueList(theRelationshipElement)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theRelationshipElement)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theRelationshipElement)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theRelationshipElement)).toBeNull();
});

test("casts over an instance of SubmodelElementList", () => {
  const theSubmodelElementList = TestCommonJsonization.loadMinimalSubmodelElementList();

  expect(AasTypes.isHasSemantics(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isExtension(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asExtension(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isHasExtensions(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isReferable(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asReferable(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isIdentifiable(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isHasKind(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isHasDataSpecification(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isAdministrativeInformation(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isQualifiable(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isQualifier(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isAssetInformation(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isResource(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asResource(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isSubmodel(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isSubmodelElement(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isRelationshipElement(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theSubmodelElementList)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElementList(theSubmodelElementList)).toStrictEqual(
    theSubmodelElementList
  );

  expect(AasTypes.isSubmodelElementCollection(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isDataElement(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isProperty(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asProperty(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isRange(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asRange(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isReferenceElement(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isBlob(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asBlob(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isFile(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asFile(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isEntity(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asEntity(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isEventPayload(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isEventElement(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isBasicEventElement(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isOperation(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asOperation(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isOperationVariable(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isCapability(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asCapability(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isConceptDescription(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isReference(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asReference(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isKey(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asKey(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isLangString(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asLangString(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isEnvironment(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isValueReferencePair(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isValueList(theSubmodelElementList)).toStrictEqual(false);
  expect(AasTypes.asValueList(theSubmodelElementList)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theSubmodelElementList)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theSubmodelElementList)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theSubmodelElementList)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theSubmodelElementList)).toBeNull();
});

test("casts over an instance of SubmodelElementCollection", () => {
  const theSubmodelElementCollection =
    TestCommonJsonization.loadMinimalSubmodelElementCollection();

  expect(AasTypes.isHasSemantics(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isExtension(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asExtension(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isHasExtensions(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isReferable(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asReferable(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isIdentifiable(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isHasKind(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isHasDataSpecification(theSubmodelElementCollection)).toStrictEqual(
    true
  );
  expect(AasTypes.asHasDataSpecification(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(
    AasTypes.isAdministrativeInformation(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isQualifiable(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isQualifier(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isAssetInformation(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isResource(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asResource(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isSubmodel(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isSubmodelElement(theSubmodelElementCollection)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theSubmodelElementCollection)).toStrictEqual(
    theSubmodelElementCollection
  );

  expect(AasTypes.isRelationshipElement(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asRelationshipElement(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theSubmodelElementCollection)
  ).toStrictEqual(true);
  expect(
    AasTypes.asSubmodelElementCollection(theSubmodelElementCollection)
  ).toStrictEqual(theSubmodelElementCollection);

  expect(AasTypes.isDataElement(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isProperty(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asProperty(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asMultiLanguageProperty(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isRange(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asRange(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isReferenceElement(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isBlob(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asBlob(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isFile(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asFile(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theSubmodelElementCollection)
  ).toBeNull();

  expect(AasTypes.isEntity(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asEntity(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isEventPayload(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isEventElement(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isBasicEventElement(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isOperation(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asOperation(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isOperationVariable(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isCapability(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asCapability(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isConceptDescription(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isReference(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asReference(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isKey(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asKey(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isLangString(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asLangString(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isEnvironment(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isEmbeddedDataSpecification(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isValueReferencePair(theSubmodelElementCollection)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theSubmodelElementCollection)).toBeNull();

  expect(AasTypes.isValueList(theSubmodelElementCollection)).toStrictEqual(false);
  expect(AasTypes.asValueList(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theSubmodelElementCollection)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theSubmodelElementCollection)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theSubmodelElementCollection)
  ).toBeNull();
});

test("casts over an instance of Property", () => {
  const theProperty = TestCommonJsonization.loadMinimalProperty();

  expect(AasTypes.isHasSemantics(theProperty)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isExtension(theProperty)).toStrictEqual(false);
  expect(AasTypes.asExtension(theProperty)).toBeNull();

  expect(AasTypes.isHasExtensions(theProperty)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isReferable(theProperty)).toStrictEqual(true);
  expect(AasTypes.asReferable(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isIdentifiable(theProperty)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theProperty)).toBeNull();

  expect(AasTypes.isHasKind(theProperty)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isHasDataSpecification(theProperty)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isAdministrativeInformation(theProperty)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theProperty)).toBeNull();

  expect(AasTypes.isQualifiable(theProperty)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isQualifier(theProperty)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theProperty)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theProperty)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theProperty)).toBeNull();

  expect(AasTypes.isAssetInformation(theProperty)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theProperty)).toBeNull();

  expect(AasTypes.isResource(theProperty)).toStrictEqual(false);
  expect(AasTypes.asResource(theProperty)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theProperty)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theProperty)).toBeNull();

  expect(AasTypes.isSubmodel(theProperty)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theProperty)).toBeNull();

  expect(AasTypes.isSubmodelElement(theProperty)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isRelationshipElement(theProperty)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theProperty)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theProperty)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theProperty)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theProperty)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theProperty)).toBeNull();

  expect(AasTypes.isDataElement(theProperty)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isProperty(theProperty)).toStrictEqual(true);
  expect(AasTypes.asProperty(theProperty)).toStrictEqual(theProperty);

  expect(AasTypes.isMultiLanguageProperty(theProperty)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theProperty)).toBeNull();

  expect(AasTypes.isRange(theProperty)).toStrictEqual(false);
  expect(AasTypes.asRange(theProperty)).toBeNull();

  expect(AasTypes.isReferenceElement(theProperty)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theProperty)).toBeNull();

  expect(AasTypes.isBlob(theProperty)).toStrictEqual(false);
  expect(AasTypes.asBlob(theProperty)).toBeNull();

  expect(AasTypes.isFile(theProperty)).toStrictEqual(false);
  expect(AasTypes.asFile(theProperty)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theProperty)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theProperty)).toBeNull();

  expect(AasTypes.isEntity(theProperty)).toStrictEqual(false);
  expect(AasTypes.asEntity(theProperty)).toBeNull();

  expect(AasTypes.isEventPayload(theProperty)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theProperty)).toBeNull();

  expect(AasTypes.isEventElement(theProperty)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theProperty)).toBeNull();

  expect(AasTypes.isBasicEventElement(theProperty)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theProperty)).toBeNull();

  expect(AasTypes.isOperation(theProperty)).toStrictEqual(false);
  expect(AasTypes.asOperation(theProperty)).toBeNull();

  expect(AasTypes.isOperationVariable(theProperty)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theProperty)).toBeNull();

  expect(AasTypes.isCapability(theProperty)).toStrictEqual(false);
  expect(AasTypes.asCapability(theProperty)).toBeNull();

  expect(AasTypes.isConceptDescription(theProperty)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theProperty)).toBeNull();

  expect(AasTypes.isReference(theProperty)).toStrictEqual(false);
  expect(AasTypes.asReference(theProperty)).toBeNull();

  expect(AasTypes.isKey(theProperty)).toStrictEqual(false);
  expect(AasTypes.asKey(theProperty)).toBeNull();

  expect(AasTypes.isLangString(theProperty)).toStrictEqual(false);
  expect(AasTypes.asLangString(theProperty)).toBeNull();

  expect(AasTypes.isEnvironment(theProperty)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theProperty)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theProperty)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theProperty)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theProperty)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theProperty)).toBeNull();

  expect(AasTypes.isValueReferencePair(theProperty)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theProperty)).toBeNull();

  expect(AasTypes.isValueList(theProperty)).toStrictEqual(false);
  expect(AasTypes.asValueList(theProperty)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theProperty)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theProperty)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theProperty)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theProperty)).toBeNull();
});

test("casts over an instance of MultiLanguageProperty", () => {
  const theMultiLanguageProperty =
    TestCommonJsonization.loadMinimalMultiLanguageProperty();

  expect(AasTypes.isHasSemantics(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isExtension(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asExtension(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isHasExtensions(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isReferable(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asReferable(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isIdentifiable(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isHasKind(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isHasDataSpecification(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isAdministrativeInformation(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isQualifiable(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isQualifier(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isAssetInformation(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isResource(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asResource(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isSubmodel(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isSubmodelElement(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isRelationshipElement(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isDataElement(theMultiLanguageProperty)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isProperty(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asProperty(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theMultiLanguageProperty)).toStrictEqual(
    true
  );
  expect(AasTypes.asMultiLanguageProperty(theMultiLanguageProperty)).toStrictEqual(
    theMultiLanguageProperty
  );

  expect(AasTypes.isRange(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asRange(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isReferenceElement(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isBlob(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asBlob(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isFile(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asFile(theMultiLanguageProperty)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theMultiLanguageProperty)
  ).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isEntity(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asEntity(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isEventPayload(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isEventElement(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isBasicEventElement(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isOperation(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asOperation(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isOperationVariable(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isCapability(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asCapability(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isConceptDescription(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isReference(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asReference(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isKey(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asKey(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isLangString(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asLangString(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isEnvironment(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isValueReferencePair(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isValueList(theMultiLanguageProperty)).toStrictEqual(false);
  expect(AasTypes.asValueList(theMultiLanguageProperty)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theMultiLanguageProperty)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theMultiLanguageProperty)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theMultiLanguageProperty)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theMultiLanguageProperty)).toBeNull();
});

test("casts over an instance of Range", () => {
  const theRange = TestCommonJsonization.loadMinimalRange();

  expect(AasTypes.isHasSemantics(theRange)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isExtension(theRange)).toStrictEqual(false);
  expect(AasTypes.asExtension(theRange)).toBeNull();

  expect(AasTypes.isHasExtensions(theRange)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isReferable(theRange)).toStrictEqual(true);
  expect(AasTypes.asReferable(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isIdentifiable(theRange)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theRange)).toBeNull();

  expect(AasTypes.isHasKind(theRange)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isHasDataSpecification(theRange)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isAdministrativeInformation(theRange)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theRange)).toBeNull();

  expect(AasTypes.isQualifiable(theRange)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isQualifier(theRange)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theRange)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theRange)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theRange)).toBeNull();

  expect(AasTypes.isAssetInformation(theRange)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theRange)).toBeNull();

  expect(AasTypes.isResource(theRange)).toStrictEqual(false);
  expect(AasTypes.asResource(theRange)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theRange)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theRange)).toBeNull();

  expect(AasTypes.isSubmodel(theRange)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theRange)).toBeNull();

  expect(AasTypes.isSubmodelElement(theRange)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isRelationshipElement(theRange)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theRange)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theRange)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theRange)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theRange)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theRange)).toBeNull();

  expect(AasTypes.isDataElement(theRange)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isProperty(theRange)).toStrictEqual(false);
  expect(AasTypes.asProperty(theRange)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theRange)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theRange)).toBeNull();

  expect(AasTypes.isRange(theRange)).toStrictEqual(true);
  expect(AasTypes.asRange(theRange)).toStrictEqual(theRange);

  expect(AasTypes.isReferenceElement(theRange)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theRange)).toBeNull();

  expect(AasTypes.isBlob(theRange)).toStrictEqual(false);
  expect(AasTypes.asBlob(theRange)).toBeNull();

  expect(AasTypes.isFile(theRange)).toStrictEqual(false);
  expect(AasTypes.asFile(theRange)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theRange)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theRange)).toBeNull();

  expect(AasTypes.isEntity(theRange)).toStrictEqual(false);
  expect(AasTypes.asEntity(theRange)).toBeNull();

  expect(AasTypes.isEventPayload(theRange)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theRange)).toBeNull();

  expect(AasTypes.isEventElement(theRange)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theRange)).toBeNull();

  expect(AasTypes.isBasicEventElement(theRange)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theRange)).toBeNull();

  expect(AasTypes.isOperation(theRange)).toStrictEqual(false);
  expect(AasTypes.asOperation(theRange)).toBeNull();

  expect(AasTypes.isOperationVariable(theRange)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theRange)).toBeNull();

  expect(AasTypes.isCapability(theRange)).toStrictEqual(false);
  expect(AasTypes.asCapability(theRange)).toBeNull();

  expect(AasTypes.isConceptDescription(theRange)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theRange)).toBeNull();

  expect(AasTypes.isReference(theRange)).toStrictEqual(false);
  expect(AasTypes.asReference(theRange)).toBeNull();

  expect(AasTypes.isKey(theRange)).toStrictEqual(false);
  expect(AasTypes.asKey(theRange)).toBeNull();

  expect(AasTypes.isLangString(theRange)).toStrictEqual(false);
  expect(AasTypes.asLangString(theRange)).toBeNull();

  expect(AasTypes.isEnvironment(theRange)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theRange)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theRange)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theRange)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theRange)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theRange)).toBeNull();

  expect(AasTypes.isValueReferencePair(theRange)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theRange)).toBeNull();

  expect(AasTypes.isValueList(theRange)).toStrictEqual(false);
  expect(AasTypes.asValueList(theRange)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theRange)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theRange)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theRange)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theRange)).toBeNull();
});

test("casts over an instance of ReferenceElement", () => {
  const theReferenceElement = TestCommonJsonization.loadMinimalReferenceElement();

  expect(AasTypes.isHasSemantics(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isExtension(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asExtension(theReferenceElement)).toBeNull();

  expect(AasTypes.isHasExtensions(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isReferable(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asReferable(theReferenceElement)).toStrictEqual(theReferenceElement);

  expect(AasTypes.isIdentifiable(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theReferenceElement)).toBeNull();

  expect(AasTypes.isHasKind(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theReferenceElement)).toStrictEqual(theReferenceElement);

  expect(AasTypes.isHasDataSpecification(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isAdministrativeInformation(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theReferenceElement)).toBeNull();

  expect(AasTypes.isQualifiable(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isQualifier(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theReferenceElement)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theReferenceElement)).toBeNull();

  expect(AasTypes.isAssetInformation(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theReferenceElement)).toBeNull();

  expect(AasTypes.isResource(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asResource(theReferenceElement)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theReferenceElement)).toBeNull();

  expect(AasTypes.isSubmodel(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theReferenceElement)).toBeNull();

  expect(AasTypes.isSubmodelElement(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isRelationshipElement(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theReferenceElement)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theReferenceElement)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theReferenceElement)).toBeNull();

  expect(AasTypes.isDataElement(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isProperty(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asProperty(theReferenceElement)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theReferenceElement)).toBeNull();

  expect(AasTypes.isRange(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asRange(theReferenceElement)).toBeNull();

  expect(AasTypes.isReferenceElement(theReferenceElement)).toStrictEqual(true);
  expect(AasTypes.asReferenceElement(theReferenceElement)).toStrictEqual(
    theReferenceElement
  );

  expect(AasTypes.isBlob(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asBlob(theReferenceElement)).toBeNull();

  expect(AasTypes.isFile(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asFile(theReferenceElement)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theReferenceElement)).toBeNull();

  expect(AasTypes.isEntity(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asEntity(theReferenceElement)).toBeNull();

  expect(AasTypes.isEventPayload(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theReferenceElement)).toBeNull();

  expect(AasTypes.isEventElement(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theReferenceElement)).toBeNull();

  expect(AasTypes.isBasicEventElement(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theReferenceElement)).toBeNull();

  expect(AasTypes.isOperation(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asOperation(theReferenceElement)).toBeNull();

  expect(AasTypes.isOperationVariable(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theReferenceElement)).toBeNull();

  expect(AasTypes.isCapability(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asCapability(theReferenceElement)).toBeNull();

  expect(AasTypes.isConceptDescription(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theReferenceElement)).toBeNull();

  expect(AasTypes.isReference(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asReference(theReferenceElement)).toBeNull();

  expect(AasTypes.isKey(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asKey(theReferenceElement)).toBeNull();

  expect(AasTypes.isLangString(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asLangString(theReferenceElement)).toBeNull();

  expect(AasTypes.isEnvironment(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theReferenceElement)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theReferenceElement)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theReferenceElement)).toBeNull();

  expect(AasTypes.isValueReferencePair(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theReferenceElement)).toBeNull();

  expect(AasTypes.isValueList(theReferenceElement)).toStrictEqual(false);
  expect(AasTypes.asValueList(theReferenceElement)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theReferenceElement)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theReferenceElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theReferenceElement)).toBeNull();
});

test("casts over an instance of Blob", () => {
  const theBlob = TestCommonJsonization.loadMinimalBlob();

  expect(AasTypes.isHasSemantics(theBlob)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isExtension(theBlob)).toStrictEqual(false);
  expect(AasTypes.asExtension(theBlob)).toBeNull();

  expect(AasTypes.isHasExtensions(theBlob)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isReferable(theBlob)).toStrictEqual(true);
  expect(AasTypes.asReferable(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isIdentifiable(theBlob)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theBlob)).toBeNull();

  expect(AasTypes.isHasKind(theBlob)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isHasDataSpecification(theBlob)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isAdministrativeInformation(theBlob)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theBlob)).toBeNull();

  expect(AasTypes.isQualifiable(theBlob)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isQualifier(theBlob)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theBlob)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theBlob)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theBlob)).toBeNull();

  expect(AasTypes.isAssetInformation(theBlob)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theBlob)).toBeNull();

  expect(AasTypes.isResource(theBlob)).toStrictEqual(false);
  expect(AasTypes.asResource(theBlob)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theBlob)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theBlob)).toBeNull();

  expect(AasTypes.isSubmodel(theBlob)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theBlob)).toBeNull();

  expect(AasTypes.isSubmodelElement(theBlob)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isRelationshipElement(theBlob)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theBlob)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theBlob)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theBlob)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theBlob)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theBlob)).toBeNull();

  expect(AasTypes.isDataElement(theBlob)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isProperty(theBlob)).toStrictEqual(false);
  expect(AasTypes.asProperty(theBlob)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theBlob)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theBlob)).toBeNull();

  expect(AasTypes.isRange(theBlob)).toStrictEqual(false);
  expect(AasTypes.asRange(theBlob)).toBeNull();

  expect(AasTypes.isReferenceElement(theBlob)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theBlob)).toBeNull();

  expect(AasTypes.isBlob(theBlob)).toStrictEqual(true);
  expect(AasTypes.asBlob(theBlob)).toStrictEqual(theBlob);

  expect(AasTypes.isFile(theBlob)).toStrictEqual(false);
  expect(AasTypes.asFile(theBlob)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theBlob)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theBlob)).toBeNull();

  expect(AasTypes.isEntity(theBlob)).toStrictEqual(false);
  expect(AasTypes.asEntity(theBlob)).toBeNull();

  expect(AasTypes.isEventPayload(theBlob)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theBlob)).toBeNull();

  expect(AasTypes.isEventElement(theBlob)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theBlob)).toBeNull();

  expect(AasTypes.isBasicEventElement(theBlob)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theBlob)).toBeNull();

  expect(AasTypes.isOperation(theBlob)).toStrictEqual(false);
  expect(AasTypes.asOperation(theBlob)).toBeNull();

  expect(AasTypes.isOperationVariable(theBlob)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theBlob)).toBeNull();

  expect(AasTypes.isCapability(theBlob)).toStrictEqual(false);
  expect(AasTypes.asCapability(theBlob)).toBeNull();

  expect(AasTypes.isConceptDescription(theBlob)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theBlob)).toBeNull();

  expect(AasTypes.isReference(theBlob)).toStrictEqual(false);
  expect(AasTypes.asReference(theBlob)).toBeNull();

  expect(AasTypes.isKey(theBlob)).toStrictEqual(false);
  expect(AasTypes.asKey(theBlob)).toBeNull();

  expect(AasTypes.isLangString(theBlob)).toStrictEqual(false);
  expect(AasTypes.asLangString(theBlob)).toBeNull();

  expect(AasTypes.isEnvironment(theBlob)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theBlob)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theBlob)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theBlob)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theBlob)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theBlob)).toBeNull();

  expect(AasTypes.isValueReferencePair(theBlob)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theBlob)).toBeNull();

  expect(AasTypes.isValueList(theBlob)).toStrictEqual(false);
  expect(AasTypes.asValueList(theBlob)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theBlob)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theBlob)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theBlob)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theBlob)).toBeNull();
});

test("casts over an instance of File", () => {
  const theFile = TestCommonJsonization.loadMinimalFile();

  expect(AasTypes.isHasSemantics(theFile)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isExtension(theFile)).toStrictEqual(false);
  expect(AasTypes.asExtension(theFile)).toBeNull();

  expect(AasTypes.isHasExtensions(theFile)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isReferable(theFile)).toStrictEqual(true);
  expect(AasTypes.asReferable(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isIdentifiable(theFile)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theFile)).toBeNull();

  expect(AasTypes.isHasKind(theFile)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isHasDataSpecification(theFile)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isAdministrativeInformation(theFile)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theFile)).toBeNull();

  expect(AasTypes.isQualifiable(theFile)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isQualifier(theFile)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theFile)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theFile)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theFile)).toBeNull();

  expect(AasTypes.isAssetInformation(theFile)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theFile)).toBeNull();

  expect(AasTypes.isResource(theFile)).toStrictEqual(false);
  expect(AasTypes.asResource(theFile)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theFile)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theFile)).toBeNull();

  expect(AasTypes.isSubmodel(theFile)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theFile)).toBeNull();

  expect(AasTypes.isSubmodelElement(theFile)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isRelationshipElement(theFile)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theFile)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theFile)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theFile)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theFile)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theFile)).toBeNull();

  expect(AasTypes.isDataElement(theFile)).toStrictEqual(true);
  expect(AasTypes.asDataElement(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isProperty(theFile)).toStrictEqual(false);
  expect(AasTypes.asProperty(theFile)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theFile)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theFile)).toBeNull();

  expect(AasTypes.isRange(theFile)).toStrictEqual(false);
  expect(AasTypes.asRange(theFile)).toBeNull();

  expect(AasTypes.isReferenceElement(theFile)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theFile)).toBeNull();

  expect(AasTypes.isBlob(theFile)).toStrictEqual(false);
  expect(AasTypes.asBlob(theFile)).toBeNull();

  expect(AasTypes.isFile(theFile)).toStrictEqual(true);
  expect(AasTypes.asFile(theFile)).toStrictEqual(theFile);

  expect(AasTypes.isAnnotatedRelationshipElement(theFile)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theFile)).toBeNull();

  expect(AasTypes.isEntity(theFile)).toStrictEqual(false);
  expect(AasTypes.asEntity(theFile)).toBeNull();

  expect(AasTypes.isEventPayload(theFile)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theFile)).toBeNull();

  expect(AasTypes.isEventElement(theFile)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theFile)).toBeNull();

  expect(AasTypes.isBasicEventElement(theFile)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theFile)).toBeNull();

  expect(AasTypes.isOperation(theFile)).toStrictEqual(false);
  expect(AasTypes.asOperation(theFile)).toBeNull();

  expect(AasTypes.isOperationVariable(theFile)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theFile)).toBeNull();

  expect(AasTypes.isCapability(theFile)).toStrictEqual(false);
  expect(AasTypes.asCapability(theFile)).toBeNull();

  expect(AasTypes.isConceptDescription(theFile)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theFile)).toBeNull();

  expect(AasTypes.isReference(theFile)).toStrictEqual(false);
  expect(AasTypes.asReference(theFile)).toBeNull();

  expect(AasTypes.isKey(theFile)).toStrictEqual(false);
  expect(AasTypes.asKey(theFile)).toBeNull();

  expect(AasTypes.isLangString(theFile)).toStrictEqual(false);
  expect(AasTypes.asLangString(theFile)).toBeNull();

  expect(AasTypes.isEnvironment(theFile)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theFile)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theFile)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theFile)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theFile)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theFile)).toBeNull();

  expect(AasTypes.isValueReferencePair(theFile)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theFile)).toBeNull();

  expect(AasTypes.isValueList(theFile)).toStrictEqual(false);
  expect(AasTypes.asValueList(theFile)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theFile)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theFile)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theFile)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theFile)).toBeNull();
});

test("casts over an instance of AnnotatedRelationshipElement", () => {
  const theAnnotatedRelationshipElement =
    TestCommonJsonization.loadMinimalAnnotatedRelationshipElement();

  expect(AasTypes.isHasSemantics(theAnnotatedRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isExtension(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asExtension(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isHasExtensions(theAnnotatedRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isReferable(theAnnotatedRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asReferable(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isIdentifiable(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isHasKind(theAnnotatedRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(
    AasTypes.isHasDataSpecification(theAnnotatedRelationshipElement)
  ).toStrictEqual(true);
  expect(
    AasTypes.asHasDataSpecification(theAnnotatedRelationshipElement)
  ).toStrictEqual(theAnnotatedRelationshipElement);

  expect(
    AasTypes.isAdministrativeInformation(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAdministrativeInformation(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(AasTypes.isQualifiable(theAnnotatedRelationshipElement)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isQualifier(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAssetAdministrationShell(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(AasTypes.isAssetInformation(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isResource(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asResource(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asSpecificAssetId(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isSubmodel(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isSubmodelElement(theAnnotatedRelationshipElement)).toStrictEqual(
    true
  );
  expect(AasTypes.asSubmodelElement(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isRelationshipElement(theAnnotatedRelationshipElement)).toStrictEqual(
    true
  );
  expect(AasTypes.asRelationshipElement(theAnnotatedRelationshipElement)).toStrictEqual(
    theAnnotatedRelationshipElement
  );

  expect(AasTypes.isSubmodelElementList(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asSubmodelElementCollection(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(AasTypes.isDataElement(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isProperty(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asProperty(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isMultiLanguageProperty(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isRange(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asRange(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isReferenceElement(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isBlob(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asBlob(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isFile(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asFile(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theAnnotatedRelationshipElement)
  ).toStrictEqual(true);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theAnnotatedRelationshipElement)
  ).toStrictEqual(theAnnotatedRelationshipElement);

  expect(AasTypes.isEntity(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEntity(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isEventPayload(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isEventElement(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isBasicEventElement(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isOperation(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asOperation(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isOperationVariable(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isCapability(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asCapability(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isConceptDescription(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isReference(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asReference(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isKey(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asKey(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isLangString(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asLangString(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isEnvironment(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationContent(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(
    AasTypes.isEmbeddedDataSpecification(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asEmbeddedDataSpecification(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(AasTypes.isValueReferencePair(theAnnotatedRelationshipElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theAnnotatedRelationshipElement)).toBeNull();

  expect(AasTypes.isValueList(theAnnotatedRelationshipElement)).toStrictEqual(false);
  expect(AasTypes.asValueList(theAnnotatedRelationshipElement)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationIec61360(theAnnotatedRelationshipElement)
  ).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theAnnotatedRelationshipElement)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theAnnotatedRelationshipElement)
  ).toBeNull();
});

test("casts over an instance of Entity", () => {
  const theEntity = TestCommonJsonization.loadMinimalEntity();

  expect(AasTypes.isHasSemantics(theEntity)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isExtension(theEntity)).toStrictEqual(false);
  expect(AasTypes.asExtension(theEntity)).toBeNull();

  expect(AasTypes.isHasExtensions(theEntity)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isReferable(theEntity)).toStrictEqual(true);
  expect(AasTypes.asReferable(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isIdentifiable(theEntity)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theEntity)).toBeNull();

  expect(AasTypes.isHasKind(theEntity)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isHasDataSpecification(theEntity)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isAdministrativeInformation(theEntity)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theEntity)).toBeNull();

  expect(AasTypes.isQualifiable(theEntity)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isQualifier(theEntity)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theEntity)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theEntity)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theEntity)).toBeNull();

  expect(AasTypes.isAssetInformation(theEntity)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theEntity)).toBeNull();

  expect(AasTypes.isResource(theEntity)).toStrictEqual(false);
  expect(AasTypes.asResource(theEntity)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theEntity)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theEntity)).toBeNull();

  expect(AasTypes.isSubmodel(theEntity)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theEntity)).toBeNull();

  expect(AasTypes.isSubmodelElement(theEntity)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isRelationshipElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theEntity)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theEntity)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theEntity)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theEntity)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theEntity)).toBeNull();

  expect(AasTypes.isDataElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theEntity)).toBeNull();

  expect(AasTypes.isProperty(theEntity)).toStrictEqual(false);
  expect(AasTypes.asProperty(theEntity)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theEntity)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theEntity)).toBeNull();

  expect(AasTypes.isRange(theEntity)).toStrictEqual(false);
  expect(AasTypes.asRange(theEntity)).toBeNull();

  expect(AasTypes.isReferenceElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theEntity)).toBeNull();

  expect(AasTypes.isBlob(theEntity)).toStrictEqual(false);
  expect(AasTypes.asBlob(theEntity)).toBeNull();

  expect(AasTypes.isFile(theEntity)).toStrictEqual(false);
  expect(AasTypes.asFile(theEntity)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theEntity)).toBeNull();

  expect(AasTypes.isEntity(theEntity)).toStrictEqual(true);
  expect(AasTypes.asEntity(theEntity)).toStrictEqual(theEntity);

  expect(AasTypes.isEventPayload(theEntity)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theEntity)).toBeNull();

  expect(AasTypes.isEventElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theEntity)).toBeNull();

  expect(AasTypes.isBasicEventElement(theEntity)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theEntity)).toBeNull();

  expect(AasTypes.isOperation(theEntity)).toStrictEqual(false);
  expect(AasTypes.asOperation(theEntity)).toBeNull();

  expect(AasTypes.isOperationVariable(theEntity)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theEntity)).toBeNull();

  expect(AasTypes.isCapability(theEntity)).toStrictEqual(false);
  expect(AasTypes.asCapability(theEntity)).toBeNull();

  expect(AasTypes.isConceptDescription(theEntity)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theEntity)).toBeNull();

  expect(AasTypes.isReference(theEntity)).toStrictEqual(false);
  expect(AasTypes.asReference(theEntity)).toBeNull();

  expect(AasTypes.isKey(theEntity)).toStrictEqual(false);
  expect(AasTypes.asKey(theEntity)).toBeNull();

  expect(AasTypes.isLangString(theEntity)).toStrictEqual(false);
  expect(AasTypes.asLangString(theEntity)).toBeNull();

  expect(AasTypes.isEnvironment(theEntity)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theEntity)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theEntity)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theEntity)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theEntity)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theEntity)).toBeNull();

  expect(AasTypes.isValueReferencePair(theEntity)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theEntity)).toBeNull();

  expect(AasTypes.isValueList(theEntity)).toStrictEqual(false);
  expect(AasTypes.asValueList(theEntity)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theEntity)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theEntity)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theEntity)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theEntity)).toBeNull();
});

test("casts over an instance of EventPayload", () => {
  const theEventPayload = TestCommonJsonization.loadMinimalEventPayload();

  expect(AasTypes.isHasSemantics(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theEventPayload)).toBeNull();

  expect(AasTypes.isExtension(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asExtension(theEventPayload)).toBeNull();

  expect(AasTypes.isHasExtensions(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theEventPayload)).toBeNull();

  expect(AasTypes.isReferable(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asReferable(theEventPayload)).toBeNull();

  expect(AasTypes.isIdentifiable(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theEventPayload)).toBeNull();

  expect(AasTypes.isHasKind(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theEventPayload)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theEventPayload)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theEventPayload)).toBeNull();

  expect(AasTypes.isQualifiable(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theEventPayload)).toBeNull();

  expect(AasTypes.isQualifier(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theEventPayload)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theEventPayload)).toBeNull();

  expect(AasTypes.isAssetInformation(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theEventPayload)).toBeNull();

  expect(AasTypes.isResource(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asResource(theEventPayload)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theEventPayload)).toBeNull();

  expect(AasTypes.isSubmodel(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theEventPayload)).toBeNull();

  expect(AasTypes.isSubmodelElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theEventPayload)).toBeNull();

  expect(AasTypes.isRelationshipElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theEventPayload)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theEventPayload)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theEventPayload)).toBeNull();

  expect(AasTypes.isDataElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theEventPayload)).toBeNull();

  expect(AasTypes.isProperty(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asProperty(theEventPayload)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theEventPayload)).toBeNull();

  expect(AasTypes.isRange(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asRange(theEventPayload)).toBeNull();

  expect(AasTypes.isReferenceElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theEventPayload)).toBeNull();

  expect(AasTypes.isBlob(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asBlob(theEventPayload)).toBeNull();

  expect(AasTypes.isFile(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asFile(theEventPayload)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theEventPayload)).toBeNull();

  expect(AasTypes.isEntity(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asEntity(theEventPayload)).toBeNull();

  expect(AasTypes.isEventPayload(theEventPayload)).toStrictEqual(true);
  expect(AasTypes.asEventPayload(theEventPayload)).toStrictEqual(theEventPayload);

  expect(AasTypes.isEventElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theEventPayload)).toBeNull();

  expect(AasTypes.isBasicEventElement(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theEventPayload)).toBeNull();

  expect(AasTypes.isOperation(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asOperation(theEventPayload)).toBeNull();

  expect(AasTypes.isOperationVariable(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theEventPayload)).toBeNull();

  expect(AasTypes.isCapability(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asCapability(theEventPayload)).toBeNull();

  expect(AasTypes.isConceptDescription(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theEventPayload)).toBeNull();

  expect(AasTypes.isReference(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asReference(theEventPayload)).toBeNull();

  expect(AasTypes.isKey(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asKey(theEventPayload)).toBeNull();

  expect(AasTypes.isLangString(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asLangString(theEventPayload)).toBeNull();

  expect(AasTypes.isEnvironment(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theEventPayload)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theEventPayload)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theEventPayload)).toBeNull();

  expect(AasTypes.isValueReferencePair(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theEventPayload)).toBeNull();

  expect(AasTypes.isValueList(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asValueList(theEventPayload)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theEventPayload)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theEventPayload)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theEventPayload)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theEventPayload)).toBeNull();
});

test("casts over an instance of BasicEventElement", () => {
  const theBasicEventElement = TestCommonJsonization.loadMinimalBasicEventElement();

  expect(AasTypes.isHasSemantics(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isExtension(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asExtension(theBasicEventElement)).toBeNull();

  expect(AasTypes.isHasExtensions(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isReferable(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asReferable(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isIdentifiable(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theBasicEventElement)).toBeNull();

  expect(AasTypes.isHasKind(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theBasicEventElement)).toStrictEqual(theBasicEventElement);

  expect(AasTypes.isHasDataSpecification(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isAdministrativeInformation(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theBasicEventElement)).toBeNull();

  expect(AasTypes.isQualifiable(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isQualifier(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theBasicEventElement)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theBasicEventElement)).toBeNull();

  expect(AasTypes.isAssetInformation(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theBasicEventElement)).toBeNull();

  expect(AasTypes.isResource(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asResource(theBasicEventElement)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theBasicEventElement)).toBeNull();

  expect(AasTypes.isSubmodel(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theBasicEventElement)).toBeNull();

  expect(AasTypes.isSubmodelElement(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isRelationshipElement(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theBasicEventElement)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theBasicEventElement)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theBasicEventElement)).toBeNull();

  expect(AasTypes.isDataElement(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theBasicEventElement)).toBeNull();

  expect(AasTypes.isProperty(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asProperty(theBasicEventElement)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theBasicEventElement)).toBeNull();

  expect(AasTypes.isRange(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asRange(theBasicEventElement)).toBeNull();

  expect(AasTypes.isReferenceElement(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theBasicEventElement)).toBeNull();

  expect(AasTypes.isBlob(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asBlob(theBasicEventElement)).toBeNull();

  expect(AasTypes.isFile(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asFile(theBasicEventElement)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theBasicEventElement)).toBeNull();

  expect(AasTypes.isEntity(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asEntity(theBasicEventElement)).toBeNull();

  expect(AasTypes.isEventPayload(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theBasicEventElement)).toBeNull();

  expect(AasTypes.isEventElement(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asEventElement(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isBasicEventElement(theBasicEventElement)).toStrictEqual(true);
  expect(AasTypes.asBasicEventElement(theBasicEventElement)).toStrictEqual(
    theBasicEventElement
  );

  expect(AasTypes.isOperation(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asOperation(theBasicEventElement)).toBeNull();

  expect(AasTypes.isOperationVariable(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theBasicEventElement)).toBeNull();

  expect(AasTypes.isCapability(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asCapability(theBasicEventElement)).toBeNull();

  expect(AasTypes.isConceptDescription(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theBasicEventElement)).toBeNull();

  expect(AasTypes.isReference(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asReference(theBasicEventElement)).toBeNull();

  expect(AasTypes.isKey(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asKey(theBasicEventElement)).toBeNull();

  expect(AasTypes.isLangString(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asLangString(theBasicEventElement)).toBeNull();

  expect(AasTypes.isEnvironment(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theBasicEventElement)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theBasicEventElement)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theBasicEventElement)).toBeNull();

  expect(AasTypes.isValueReferencePair(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theBasicEventElement)).toBeNull();

  expect(AasTypes.isValueList(theBasicEventElement)).toStrictEqual(false);
  expect(AasTypes.asValueList(theBasicEventElement)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theBasicEventElement)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theBasicEventElement)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theBasicEventElement)).toBeNull();
});

test("casts over an instance of Operation", () => {
  const theOperation = TestCommonJsonization.loadMinimalOperation();

  expect(AasTypes.isHasSemantics(theOperation)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isExtension(theOperation)).toStrictEqual(false);
  expect(AasTypes.asExtension(theOperation)).toBeNull();

  expect(AasTypes.isHasExtensions(theOperation)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isReferable(theOperation)).toStrictEqual(true);
  expect(AasTypes.asReferable(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isIdentifiable(theOperation)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theOperation)).toBeNull();

  expect(AasTypes.isHasKind(theOperation)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isHasDataSpecification(theOperation)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isAdministrativeInformation(theOperation)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theOperation)).toBeNull();

  expect(AasTypes.isQualifiable(theOperation)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isQualifier(theOperation)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theOperation)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theOperation)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theOperation)).toBeNull();

  expect(AasTypes.isAssetInformation(theOperation)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theOperation)).toBeNull();

  expect(AasTypes.isResource(theOperation)).toStrictEqual(false);
  expect(AasTypes.asResource(theOperation)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theOperation)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theOperation)).toBeNull();

  expect(AasTypes.isSubmodel(theOperation)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theOperation)).toBeNull();

  expect(AasTypes.isSubmodelElement(theOperation)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isRelationshipElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theOperation)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theOperation)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theOperation)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theOperation)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theOperation)).toBeNull();

  expect(AasTypes.isDataElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theOperation)).toBeNull();

  expect(AasTypes.isProperty(theOperation)).toStrictEqual(false);
  expect(AasTypes.asProperty(theOperation)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theOperation)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theOperation)).toBeNull();

  expect(AasTypes.isRange(theOperation)).toStrictEqual(false);
  expect(AasTypes.asRange(theOperation)).toBeNull();

  expect(AasTypes.isReferenceElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theOperation)).toBeNull();

  expect(AasTypes.isBlob(theOperation)).toStrictEqual(false);
  expect(AasTypes.asBlob(theOperation)).toBeNull();

  expect(AasTypes.isFile(theOperation)).toStrictEqual(false);
  expect(AasTypes.asFile(theOperation)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theOperation)).toBeNull();

  expect(AasTypes.isEntity(theOperation)).toStrictEqual(false);
  expect(AasTypes.asEntity(theOperation)).toBeNull();

  expect(AasTypes.isEventPayload(theOperation)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theOperation)).toBeNull();

  expect(AasTypes.isEventElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theOperation)).toBeNull();

  expect(AasTypes.isBasicEventElement(theOperation)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theOperation)).toBeNull();

  expect(AasTypes.isOperation(theOperation)).toStrictEqual(true);
  expect(AasTypes.asOperation(theOperation)).toStrictEqual(theOperation);

  expect(AasTypes.isOperationVariable(theOperation)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theOperation)).toBeNull();

  expect(AasTypes.isCapability(theOperation)).toStrictEqual(false);
  expect(AasTypes.asCapability(theOperation)).toBeNull();

  expect(AasTypes.isConceptDescription(theOperation)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theOperation)).toBeNull();

  expect(AasTypes.isReference(theOperation)).toStrictEqual(false);
  expect(AasTypes.asReference(theOperation)).toBeNull();

  expect(AasTypes.isKey(theOperation)).toStrictEqual(false);
  expect(AasTypes.asKey(theOperation)).toBeNull();

  expect(AasTypes.isLangString(theOperation)).toStrictEqual(false);
  expect(AasTypes.asLangString(theOperation)).toBeNull();

  expect(AasTypes.isEnvironment(theOperation)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theOperation)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theOperation)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theOperation)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theOperation)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theOperation)).toBeNull();

  expect(AasTypes.isValueReferencePair(theOperation)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theOperation)).toBeNull();

  expect(AasTypes.isValueList(theOperation)).toStrictEqual(false);
  expect(AasTypes.asValueList(theOperation)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theOperation)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theOperation)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theOperation)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theOperation)).toBeNull();
});

test("casts over an instance of OperationVariable", () => {
  const theOperationVariable = TestCommonJsonization.loadMinimalOperationVariable();

  expect(AasTypes.isHasSemantics(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theOperationVariable)).toBeNull();

  expect(AasTypes.isExtension(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asExtension(theOperationVariable)).toBeNull();

  expect(AasTypes.isHasExtensions(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theOperationVariable)).toBeNull();

  expect(AasTypes.isReferable(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asReferable(theOperationVariable)).toBeNull();

  expect(AasTypes.isIdentifiable(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theOperationVariable)).toBeNull();

  expect(AasTypes.isHasKind(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theOperationVariable)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theOperationVariable)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theOperationVariable)).toBeNull();

  expect(AasTypes.isQualifiable(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theOperationVariable)).toBeNull();

  expect(AasTypes.isQualifier(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theOperationVariable)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theOperationVariable)).toBeNull();

  expect(AasTypes.isAssetInformation(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theOperationVariable)).toBeNull();

  expect(AasTypes.isResource(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asResource(theOperationVariable)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theOperationVariable)).toBeNull();

  expect(AasTypes.isSubmodel(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theOperationVariable)).toBeNull();

  expect(AasTypes.isSubmodelElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isRelationshipElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theOperationVariable)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theOperationVariable)).toBeNull();

  expect(AasTypes.isDataElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isProperty(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asProperty(theOperationVariable)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theOperationVariable)).toBeNull();

  expect(AasTypes.isRange(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asRange(theOperationVariable)).toBeNull();

  expect(AasTypes.isReferenceElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isBlob(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asBlob(theOperationVariable)).toBeNull();

  expect(AasTypes.isFile(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asFile(theOperationVariable)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isEntity(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asEntity(theOperationVariable)).toBeNull();

  expect(AasTypes.isEventPayload(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theOperationVariable)).toBeNull();

  expect(AasTypes.isEventElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isBasicEventElement(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theOperationVariable)).toBeNull();

  expect(AasTypes.isOperation(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asOperation(theOperationVariable)).toBeNull();

  expect(AasTypes.isOperationVariable(theOperationVariable)).toStrictEqual(true);
  expect(AasTypes.asOperationVariable(theOperationVariable)).toStrictEqual(
    theOperationVariable
  );

  expect(AasTypes.isCapability(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asCapability(theOperationVariable)).toBeNull();

  expect(AasTypes.isConceptDescription(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theOperationVariable)).toBeNull();

  expect(AasTypes.isReference(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asReference(theOperationVariable)).toBeNull();

  expect(AasTypes.isKey(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asKey(theOperationVariable)).toBeNull();

  expect(AasTypes.isLangString(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asLangString(theOperationVariable)).toBeNull();

  expect(AasTypes.isEnvironment(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theOperationVariable)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theOperationVariable)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theOperationVariable)).toBeNull();

  expect(AasTypes.isValueReferencePair(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theOperationVariable)).toBeNull();

  expect(AasTypes.isValueList(theOperationVariable)).toStrictEqual(false);
  expect(AasTypes.asValueList(theOperationVariable)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theOperationVariable)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theOperationVariable)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theOperationVariable)).toBeNull();
});

test("casts over an instance of Capability", () => {
  const theCapability = TestCommonJsonization.loadMinimalCapability();

  expect(AasTypes.isHasSemantics(theCapability)).toStrictEqual(true);
  expect(AasTypes.asHasSemantics(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isExtension(theCapability)).toStrictEqual(false);
  expect(AasTypes.asExtension(theCapability)).toBeNull();

  expect(AasTypes.isHasExtensions(theCapability)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isReferable(theCapability)).toStrictEqual(true);
  expect(AasTypes.asReferable(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isIdentifiable(theCapability)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theCapability)).toBeNull();

  expect(AasTypes.isHasKind(theCapability)).toStrictEqual(true);
  expect(AasTypes.asHasKind(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isHasDataSpecification(theCapability)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isAdministrativeInformation(theCapability)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theCapability)).toBeNull();

  expect(AasTypes.isQualifiable(theCapability)).toStrictEqual(true);
  expect(AasTypes.asQualifiable(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isQualifier(theCapability)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theCapability)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theCapability)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theCapability)).toBeNull();

  expect(AasTypes.isAssetInformation(theCapability)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theCapability)).toBeNull();

  expect(AasTypes.isResource(theCapability)).toStrictEqual(false);
  expect(AasTypes.asResource(theCapability)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theCapability)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theCapability)).toBeNull();

  expect(AasTypes.isSubmodel(theCapability)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theCapability)).toBeNull();

  expect(AasTypes.isSubmodelElement(theCapability)).toStrictEqual(true);
  expect(AasTypes.asSubmodelElement(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isRelationshipElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theCapability)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theCapability)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theCapability)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theCapability)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theCapability)).toBeNull();

  expect(AasTypes.isDataElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theCapability)).toBeNull();

  expect(AasTypes.isProperty(theCapability)).toStrictEqual(false);
  expect(AasTypes.asProperty(theCapability)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theCapability)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theCapability)).toBeNull();

  expect(AasTypes.isRange(theCapability)).toStrictEqual(false);
  expect(AasTypes.asRange(theCapability)).toBeNull();

  expect(AasTypes.isReferenceElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theCapability)).toBeNull();

  expect(AasTypes.isBlob(theCapability)).toStrictEqual(false);
  expect(AasTypes.asBlob(theCapability)).toBeNull();

  expect(AasTypes.isFile(theCapability)).toStrictEqual(false);
  expect(AasTypes.asFile(theCapability)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theCapability)).toBeNull();

  expect(AasTypes.isEntity(theCapability)).toStrictEqual(false);
  expect(AasTypes.asEntity(theCapability)).toBeNull();

  expect(AasTypes.isEventPayload(theCapability)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theCapability)).toBeNull();

  expect(AasTypes.isEventElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theCapability)).toBeNull();

  expect(AasTypes.isBasicEventElement(theCapability)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theCapability)).toBeNull();

  expect(AasTypes.isOperation(theCapability)).toStrictEqual(false);
  expect(AasTypes.asOperation(theCapability)).toBeNull();

  expect(AasTypes.isOperationVariable(theCapability)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theCapability)).toBeNull();

  expect(AasTypes.isCapability(theCapability)).toStrictEqual(true);
  expect(AasTypes.asCapability(theCapability)).toStrictEqual(theCapability);

  expect(AasTypes.isConceptDescription(theCapability)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theCapability)).toBeNull();

  expect(AasTypes.isReference(theCapability)).toStrictEqual(false);
  expect(AasTypes.asReference(theCapability)).toBeNull();

  expect(AasTypes.isKey(theCapability)).toStrictEqual(false);
  expect(AasTypes.asKey(theCapability)).toBeNull();

  expect(AasTypes.isLangString(theCapability)).toStrictEqual(false);
  expect(AasTypes.asLangString(theCapability)).toBeNull();

  expect(AasTypes.isEnvironment(theCapability)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theCapability)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theCapability)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theCapability)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theCapability)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theCapability)).toBeNull();

  expect(AasTypes.isValueReferencePair(theCapability)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theCapability)).toBeNull();

  expect(AasTypes.isValueList(theCapability)).toStrictEqual(false);
  expect(AasTypes.asValueList(theCapability)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theCapability)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theCapability)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theCapability)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theCapability)).toBeNull();
});

test("casts over an instance of ConceptDescription", () => {
  const theConceptDescription = TestCommonJsonization.loadMinimalConceptDescription();

  expect(AasTypes.isHasSemantics(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theConceptDescription)).toBeNull();

  expect(AasTypes.isExtension(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asExtension(theConceptDescription)).toBeNull();

  expect(AasTypes.isHasExtensions(theConceptDescription)).toStrictEqual(true);
  expect(AasTypes.asHasExtensions(theConceptDescription)).toStrictEqual(
    theConceptDescription
  );

  expect(AasTypes.isReferable(theConceptDescription)).toStrictEqual(true);
  expect(AasTypes.asReferable(theConceptDescription)).toStrictEqual(
    theConceptDescription
  );

  expect(AasTypes.isIdentifiable(theConceptDescription)).toStrictEqual(true);
  expect(AasTypes.asIdentifiable(theConceptDescription)).toStrictEqual(
    theConceptDescription
  );

  expect(AasTypes.isHasKind(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theConceptDescription)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theConceptDescription)).toStrictEqual(true);
  expect(AasTypes.asHasDataSpecification(theConceptDescription)).toStrictEqual(
    theConceptDescription
  );

  expect(AasTypes.isAdministrativeInformation(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theConceptDescription)).toBeNull();

  expect(AasTypes.isQualifiable(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theConceptDescription)).toBeNull();

  expect(AasTypes.isQualifier(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theConceptDescription)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theConceptDescription)).toBeNull();

  expect(AasTypes.isAssetInformation(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theConceptDescription)).toBeNull();

  expect(AasTypes.isResource(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asResource(theConceptDescription)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theConceptDescription)).toBeNull();

  expect(AasTypes.isSubmodel(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theConceptDescription)).toBeNull();

  expect(AasTypes.isSubmodelElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isRelationshipElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theConceptDescription)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theConceptDescription)).toBeNull();

  expect(AasTypes.isDataElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isProperty(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asProperty(theConceptDescription)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theConceptDescription)).toBeNull();

  expect(AasTypes.isRange(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asRange(theConceptDescription)).toBeNull();

  expect(AasTypes.isReferenceElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isBlob(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asBlob(theConceptDescription)).toBeNull();

  expect(AasTypes.isFile(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asFile(theConceptDescription)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isEntity(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asEntity(theConceptDescription)).toBeNull();

  expect(AasTypes.isEventPayload(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theConceptDescription)).toBeNull();

  expect(AasTypes.isEventElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isBasicEventElement(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theConceptDescription)).toBeNull();

  expect(AasTypes.isOperation(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asOperation(theConceptDescription)).toBeNull();

  expect(AasTypes.isOperationVariable(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theConceptDescription)).toBeNull();

  expect(AasTypes.isCapability(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asCapability(theConceptDescription)).toBeNull();

  expect(AasTypes.isConceptDescription(theConceptDescription)).toStrictEqual(true);
  expect(AasTypes.asConceptDescription(theConceptDescription)).toStrictEqual(
    theConceptDescription
  );

  expect(AasTypes.isReference(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asReference(theConceptDescription)).toBeNull();

  expect(AasTypes.isKey(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asKey(theConceptDescription)).toBeNull();

  expect(AasTypes.isLangString(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asLangString(theConceptDescription)).toBeNull();

  expect(AasTypes.isEnvironment(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theConceptDescription)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theConceptDescription)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theConceptDescription)).toBeNull();

  expect(AasTypes.isValueReferencePair(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theConceptDescription)).toBeNull();

  expect(AasTypes.isValueList(theConceptDescription)).toStrictEqual(false);
  expect(AasTypes.asValueList(theConceptDescription)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theConceptDescription)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theConceptDescription)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theConceptDescription)).toBeNull();
});

test("casts over an instance of Reference", () => {
  const theReference = TestCommonJsonization.loadMinimalReference();

  expect(AasTypes.isHasSemantics(theReference)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theReference)).toBeNull();

  expect(AasTypes.isExtension(theReference)).toStrictEqual(false);
  expect(AasTypes.asExtension(theReference)).toBeNull();

  expect(AasTypes.isHasExtensions(theReference)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theReference)).toBeNull();

  expect(AasTypes.isReferable(theReference)).toStrictEqual(false);
  expect(AasTypes.asReferable(theReference)).toBeNull();

  expect(AasTypes.isIdentifiable(theReference)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theReference)).toBeNull();

  expect(AasTypes.isHasKind(theReference)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theReference)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theReference)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theReference)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theReference)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theReference)).toBeNull();

  expect(AasTypes.isQualifiable(theReference)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theReference)).toBeNull();

  expect(AasTypes.isQualifier(theReference)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theReference)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theReference)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theReference)).toBeNull();

  expect(AasTypes.isAssetInformation(theReference)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theReference)).toBeNull();

  expect(AasTypes.isResource(theReference)).toStrictEqual(false);
  expect(AasTypes.asResource(theReference)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theReference)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theReference)).toBeNull();

  expect(AasTypes.isSubmodel(theReference)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theReference)).toBeNull();

  expect(AasTypes.isSubmodelElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theReference)).toBeNull();

  expect(AasTypes.isRelationshipElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theReference)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theReference)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theReference)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theReference)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theReference)).toBeNull();

  expect(AasTypes.isDataElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theReference)).toBeNull();

  expect(AasTypes.isProperty(theReference)).toStrictEqual(false);
  expect(AasTypes.asProperty(theReference)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theReference)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theReference)).toBeNull();

  expect(AasTypes.isRange(theReference)).toStrictEqual(false);
  expect(AasTypes.asRange(theReference)).toBeNull();

  expect(AasTypes.isReferenceElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theReference)).toBeNull();

  expect(AasTypes.isBlob(theReference)).toStrictEqual(false);
  expect(AasTypes.asBlob(theReference)).toBeNull();

  expect(AasTypes.isFile(theReference)).toStrictEqual(false);
  expect(AasTypes.asFile(theReference)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theReference)).toBeNull();

  expect(AasTypes.isEntity(theReference)).toStrictEqual(false);
  expect(AasTypes.asEntity(theReference)).toBeNull();

  expect(AasTypes.isEventPayload(theReference)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theReference)).toBeNull();

  expect(AasTypes.isEventElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theReference)).toBeNull();

  expect(AasTypes.isBasicEventElement(theReference)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theReference)).toBeNull();

  expect(AasTypes.isOperation(theReference)).toStrictEqual(false);
  expect(AasTypes.asOperation(theReference)).toBeNull();

  expect(AasTypes.isOperationVariable(theReference)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theReference)).toBeNull();

  expect(AasTypes.isCapability(theReference)).toStrictEqual(false);
  expect(AasTypes.asCapability(theReference)).toBeNull();

  expect(AasTypes.isConceptDescription(theReference)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theReference)).toBeNull();

  expect(AasTypes.isReference(theReference)).toStrictEqual(true);
  expect(AasTypes.asReference(theReference)).toStrictEqual(theReference);

  expect(AasTypes.isKey(theReference)).toStrictEqual(false);
  expect(AasTypes.asKey(theReference)).toBeNull();

  expect(AasTypes.isLangString(theReference)).toStrictEqual(false);
  expect(AasTypes.asLangString(theReference)).toBeNull();

  expect(AasTypes.isEnvironment(theReference)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theReference)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theReference)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theReference)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theReference)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theReference)).toBeNull();

  expect(AasTypes.isValueReferencePair(theReference)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theReference)).toBeNull();

  expect(AasTypes.isValueList(theReference)).toStrictEqual(false);
  expect(AasTypes.asValueList(theReference)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theReference)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theReference)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theReference)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theReference)).toBeNull();
});

test("casts over an instance of Key", () => {
  const theKey = TestCommonJsonization.loadMinimalKey();

  expect(AasTypes.isHasSemantics(theKey)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theKey)).toBeNull();

  expect(AasTypes.isExtension(theKey)).toStrictEqual(false);
  expect(AasTypes.asExtension(theKey)).toBeNull();

  expect(AasTypes.isHasExtensions(theKey)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theKey)).toBeNull();

  expect(AasTypes.isReferable(theKey)).toStrictEqual(false);
  expect(AasTypes.asReferable(theKey)).toBeNull();

  expect(AasTypes.isIdentifiable(theKey)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theKey)).toBeNull();

  expect(AasTypes.isHasKind(theKey)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theKey)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theKey)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theKey)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theKey)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theKey)).toBeNull();

  expect(AasTypes.isQualifiable(theKey)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theKey)).toBeNull();

  expect(AasTypes.isQualifier(theKey)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theKey)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theKey)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theKey)).toBeNull();

  expect(AasTypes.isAssetInformation(theKey)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theKey)).toBeNull();

  expect(AasTypes.isResource(theKey)).toStrictEqual(false);
  expect(AasTypes.asResource(theKey)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theKey)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theKey)).toBeNull();

  expect(AasTypes.isSubmodel(theKey)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theKey)).toBeNull();

  expect(AasTypes.isSubmodelElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theKey)).toBeNull();

  expect(AasTypes.isRelationshipElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theKey)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theKey)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theKey)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theKey)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theKey)).toBeNull();

  expect(AasTypes.isDataElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theKey)).toBeNull();

  expect(AasTypes.isProperty(theKey)).toStrictEqual(false);
  expect(AasTypes.asProperty(theKey)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theKey)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theKey)).toBeNull();

  expect(AasTypes.isRange(theKey)).toStrictEqual(false);
  expect(AasTypes.asRange(theKey)).toBeNull();

  expect(AasTypes.isReferenceElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theKey)).toBeNull();

  expect(AasTypes.isBlob(theKey)).toStrictEqual(false);
  expect(AasTypes.asBlob(theKey)).toBeNull();

  expect(AasTypes.isFile(theKey)).toStrictEqual(false);
  expect(AasTypes.asFile(theKey)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theKey)).toBeNull();

  expect(AasTypes.isEntity(theKey)).toStrictEqual(false);
  expect(AasTypes.asEntity(theKey)).toBeNull();

  expect(AasTypes.isEventPayload(theKey)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theKey)).toBeNull();

  expect(AasTypes.isEventElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theKey)).toBeNull();

  expect(AasTypes.isBasicEventElement(theKey)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theKey)).toBeNull();

  expect(AasTypes.isOperation(theKey)).toStrictEqual(false);
  expect(AasTypes.asOperation(theKey)).toBeNull();

  expect(AasTypes.isOperationVariable(theKey)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theKey)).toBeNull();

  expect(AasTypes.isCapability(theKey)).toStrictEqual(false);
  expect(AasTypes.asCapability(theKey)).toBeNull();

  expect(AasTypes.isConceptDescription(theKey)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theKey)).toBeNull();

  expect(AasTypes.isReference(theKey)).toStrictEqual(false);
  expect(AasTypes.asReference(theKey)).toBeNull();

  expect(AasTypes.isKey(theKey)).toStrictEqual(true);
  expect(AasTypes.asKey(theKey)).toStrictEqual(theKey);

  expect(AasTypes.isLangString(theKey)).toStrictEqual(false);
  expect(AasTypes.asLangString(theKey)).toBeNull();

  expect(AasTypes.isEnvironment(theKey)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theKey)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theKey)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theKey)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theKey)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theKey)).toBeNull();

  expect(AasTypes.isValueReferencePair(theKey)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theKey)).toBeNull();

  expect(AasTypes.isValueList(theKey)).toStrictEqual(false);
  expect(AasTypes.asValueList(theKey)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theKey)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theKey)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theKey)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theKey)).toBeNull();
});

test("casts over an instance of LangString", () => {
  const theLangString = TestCommonJsonization.loadMinimalLangString();

  expect(AasTypes.isHasSemantics(theLangString)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theLangString)).toBeNull();

  expect(AasTypes.isExtension(theLangString)).toStrictEqual(false);
  expect(AasTypes.asExtension(theLangString)).toBeNull();

  expect(AasTypes.isHasExtensions(theLangString)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theLangString)).toBeNull();

  expect(AasTypes.isReferable(theLangString)).toStrictEqual(false);
  expect(AasTypes.asReferable(theLangString)).toBeNull();

  expect(AasTypes.isIdentifiable(theLangString)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theLangString)).toBeNull();

  expect(AasTypes.isHasKind(theLangString)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theLangString)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theLangString)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theLangString)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theLangString)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theLangString)).toBeNull();

  expect(AasTypes.isQualifiable(theLangString)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theLangString)).toBeNull();

  expect(AasTypes.isQualifier(theLangString)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theLangString)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theLangString)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theLangString)).toBeNull();

  expect(AasTypes.isAssetInformation(theLangString)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theLangString)).toBeNull();

  expect(AasTypes.isResource(theLangString)).toStrictEqual(false);
  expect(AasTypes.asResource(theLangString)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theLangString)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theLangString)).toBeNull();

  expect(AasTypes.isSubmodel(theLangString)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theLangString)).toBeNull();

  expect(AasTypes.isSubmodelElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theLangString)).toBeNull();

  expect(AasTypes.isRelationshipElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theLangString)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theLangString)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theLangString)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theLangString)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theLangString)).toBeNull();

  expect(AasTypes.isDataElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theLangString)).toBeNull();

  expect(AasTypes.isProperty(theLangString)).toStrictEqual(false);
  expect(AasTypes.asProperty(theLangString)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theLangString)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theLangString)).toBeNull();

  expect(AasTypes.isRange(theLangString)).toStrictEqual(false);
  expect(AasTypes.asRange(theLangString)).toBeNull();

  expect(AasTypes.isReferenceElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theLangString)).toBeNull();

  expect(AasTypes.isBlob(theLangString)).toStrictEqual(false);
  expect(AasTypes.asBlob(theLangString)).toBeNull();

  expect(AasTypes.isFile(theLangString)).toStrictEqual(false);
  expect(AasTypes.asFile(theLangString)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theLangString)).toBeNull();

  expect(AasTypes.isEntity(theLangString)).toStrictEqual(false);
  expect(AasTypes.asEntity(theLangString)).toBeNull();

  expect(AasTypes.isEventPayload(theLangString)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theLangString)).toBeNull();

  expect(AasTypes.isEventElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theLangString)).toBeNull();

  expect(AasTypes.isBasicEventElement(theLangString)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theLangString)).toBeNull();

  expect(AasTypes.isOperation(theLangString)).toStrictEqual(false);
  expect(AasTypes.asOperation(theLangString)).toBeNull();

  expect(AasTypes.isOperationVariable(theLangString)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theLangString)).toBeNull();

  expect(AasTypes.isCapability(theLangString)).toStrictEqual(false);
  expect(AasTypes.asCapability(theLangString)).toBeNull();

  expect(AasTypes.isConceptDescription(theLangString)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theLangString)).toBeNull();

  expect(AasTypes.isReference(theLangString)).toStrictEqual(false);
  expect(AasTypes.asReference(theLangString)).toBeNull();

  expect(AasTypes.isKey(theLangString)).toStrictEqual(false);
  expect(AasTypes.asKey(theLangString)).toBeNull();

  expect(AasTypes.isLangString(theLangString)).toStrictEqual(true);
  expect(AasTypes.asLangString(theLangString)).toStrictEqual(theLangString);

  expect(AasTypes.isEnvironment(theLangString)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theLangString)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theLangString)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theLangString)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theLangString)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theLangString)).toBeNull();

  expect(AasTypes.isValueReferencePair(theLangString)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theLangString)).toBeNull();

  expect(AasTypes.isValueList(theLangString)).toStrictEqual(false);
  expect(AasTypes.asValueList(theLangString)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theLangString)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theLangString)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theLangString)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theLangString)).toBeNull();
});

test("casts over an instance of Environment", () => {
  const theEnvironment = TestCommonJsonization.loadMinimalEnvironment();

  expect(AasTypes.isHasSemantics(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theEnvironment)).toBeNull();

  expect(AasTypes.isExtension(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asExtension(theEnvironment)).toBeNull();

  expect(AasTypes.isHasExtensions(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theEnvironment)).toBeNull();

  expect(AasTypes.isReferable(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asReferable(theEnvironment)).toBeNull();

  expect(AasTypes.isIdentifiable(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theEnvironment)).toBeNull();

  expect(AasTypes.isHasKind(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theEnvironment)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theEnvironment)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theEnvironment)).toBeNull();

  expect(AasTypes.isQualifiable(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theEnvironment)).toBeNull();

  expect(AasTypes.isQualifier(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theEnvironment)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theEnvironment)).toBeNull();

  expect(AasTypes.isAssetInformation(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theEnvironment)).toBeNull();

  expect(AasTypes.isResource(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asResource(theEnvironment)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theEnvironment)).toBeNull();

  expect(AasTypes.isSubmodel(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theEnvironment)).toBeNull();

  expect(AasTypes.isSubmodelElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theEnvironment)).toBeNull();

  expect(AasTypes.isRelationshipElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theEnvironment)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theEnvironment)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theEnvironment)).toBeNull();

  expect(AasTypes.isDataElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theEnvironment)).toBeNull();

  expect(AasTypes.isProperty(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asProperty(theEnvironment)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theEnvironment)).toBeNull();

  expect(AasTypes.isRange(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asRange(theEnvironment)).toBeNull();

  expect(AasTypes.isReferenceElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theEnvironment)).toBeNull();

  expect(AasTypes.isBlob(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asBlob(theEnvironment)).toBeNull();

  expect(AasTypes.isFile(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asFile(theEnvironment)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theEnvironment)).toBeNull();

  expect(AasTypes.isEntity(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asEntity(theEnvironment)).toBeNull();

  expect(AasTypes.isEventPayload(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theEnvironment)).toBeNull();

  expect(AasTypes.isEventElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theEnvironment)).toBeNull();

  expect(AasTypes.isBasicEventElement(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theEnvironment)).toBeNull();

  expect(AasTypes.isOperation(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asOperation(theEnvironment)).toBeNull();

  expect(AasTypes.isOperationVariable(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theEnvironment)).toBeNull();

  expect(AasTypes.isCapability(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asCapability(theEnvironment)).toBeNull();

  expect(AasTypes.isConceptDescription(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theEnvironment)).toBeNull();

  expect(AasTypes.isReference(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asReference(theEnvironment)).toBeNull();

  expect(AasTypes.isKey(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asKey(theEnvironment)).toBeNull();

  expect(AasTypes.isLangString(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asLangString(theEnvironment)).toBeNull();

  expect(AasTypes.isEnvironment(theEnvironment)).toStrictEqual(true);
  expect(AasTypes.asEnvironment(theEnvironment)).toStrictEqual(theEnvironment);

  expect(AasTypes.isDataSpecificationContent(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theEnvironment)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theEnvironment)).toBeNull();

  expect(AasTypes.isValueReferencePair(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theEnvironment)).toBeNull();

  expect(AasTypes.isValueList(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asValueList(theEnvironment)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theEnvironment)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theEnvironment)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theEnvironment)).toBeNull();
});

test("casts over an instance of EmbeddedDataSpecification", () => {
  const theEmbeddedDataSpecification =
    TestCommonJsonization.loadMinimalEmbeddedDataSpecification();

  expect(AasTypes.isHasSemantics(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isExtension(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asExtension(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isHasExtensions(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isReferable(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asReferable(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isIdentifiable(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isHasKind(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asHasDataSpecification(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isAdministrativeInformation(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isQualifiable(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isQualifier(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isAssetInformation(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isResource(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asResource(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isSubmodel(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isSubmodelElement(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isRelationshipElement(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asRelationshipElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isDataElement(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isProperty(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asProperty(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asMultiLanguageProperty(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isRange(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asRange(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isReferenceElement(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isBlob(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asBlob(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isFile(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asFile(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theEmbeddedDataSpecification)
  ).toBeNull();

  expect(AasTypes.isEntity(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asEntity(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isEventPayload(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isEventElement(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isBasicEventElement(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isOperation(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asOperation(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isOperationVariable(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isCapability(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asCapability(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isConceptDescription(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isReference(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asReference(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isKey(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asKey(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isLangString(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asLangString(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isEnvironment(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isEmbeddedDataSpecification(theEmbeddedDataSpecification)
  ).toStrictEqual(true);
  expect(
    AasTypes.asEmbeddedDataSpecification(theEmbeddedDataSpecification)
  ).toStrictEqual(theEmbeddedDataSpecification);

  expect(AasTypes.isValueReferencePair(theEmbeddedDataSpecification)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theEmbeddedDataSpecification)).toBeNull();

  expect(AasTypes.isValueList(theEmbeddedDataSpecification)).toStrictEqual(false);
  expect(AasTypes.asValueList(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theEmbeddedDataSpecification)).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theEmbeddedDataSpecification)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theEmbeddedDataSpecification)
  ).toBeNull();
});

test("casts over an instance of ValueReferencePair", () => {
  const theValueReferencePair = TestCommonJsonization.loadMinimalValueReferencePair();

  expect(AasTypes.isHasSemantics(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theValueReferencePair)).toBeNull();

  expect(AasTypes.isExtension(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asExtension(theValueReferencePair)).toBeNull();

  expect(AasTypes.isHasExtensions(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theValueReferencePair)).toBeNull();

  expect(AasTypes.isReferable(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asReferable(theValueReferencePair)).toBeNull();

  expect(AasTypes.isIdentifiable(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theValueReferencePair)).toBeNull();

  expect(AasTypes.isHasKind(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theValueReferencePair)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theValueReferencePair)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asAdministrativeInformation(theValueReferencePair)).toBeNull();

  expect(AasTypes.isQualifiable(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theValueReferencePair)).toBeNull();

  expect(AasTypes.isQualifier(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theValueReferencePair)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetAdministrationShell(theValueReferencePair)).toBeNull();

  expect(AasTypes.isAssetInformation(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theValueReferencePair)).toBeNull();

  expect(AasTypes.isResource(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asResource(theValueReferencePair)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theValueReferencePair)).toBeNull();

  expect(AasTypes.isSubmodel(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theValueReferencePair)).toBeNull();

  expect(AasTypes.isSubmodelElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isRelationshipElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theValueReferencePair)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementCollection(theValueReferencePair)).toBeNull();

  expect(AasTypes.isDataElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isProperty(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asProperty(theValueReferencePair)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theValueReferencePair)).toBeNull();

  expect(AasTypes.isRange(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asRange(theValueReferencePair)).toBeNull();

  expect(AasTypes.isReferenceElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isBlob(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asBlob(theValueReferencePair)).toBeNull();

  expect(AasTypes.isFile(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asFile(theValueReferencePair)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asAnnotatedRelationshipElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isEntity(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asEntity(theValueReferencePair)).toBeNull();

  expect(AasTypes.isEventPayload(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theValueReferencePair)).toBeNull();

  expect(AasTypes.isEventElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isBasicEventElement(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theValueReferencePair)).toBeNull();

  expect(AasTypes.isOperation(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asOperation(theValueReferencePair)).toBeNull();

  expect(AasTypes.isOperationVariable(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theValueReferencePair)).toBeNull();

  expect(AasTypes.isCapability(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asCapability(theValueReferencePair)).toBeNull();

  expect(AasTypes.isConceptDescription(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theValueReferencePair)).toBeNull();

  expect(AasTypes.isReference(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asReference(theValueReferencePair)).toBeNull();

  expect(AasTypes.isKey(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asKey(theValueReferencePair)).toBeNull();

  expect(AasTypes.isLangString(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asLangString(theValueReferencePair)).toBeNull();

  expect(AasTypes.isEnvironment(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theValueReferencePair)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationContent(theValueReferencePair)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asEmbeddedDataSpecification(theValueReferencePair)).toBeNull();

  expect(AasTypes.isValueReferencePair(theValueReferencePair)).toStrictEqual(true);
  expect(AasTypes.asValueReferencePair(theValueReferencePair)).toStrictEqual(
    theValueReferencePair
  );

  expect(AasTypes.isValueList(theValueReferencePair)).toStrictEqual(false);
  expect(AasTypes.asValueList(theValueReferencePair)).toBeNull();

  expect(AasTypes.isDataSpecificationIec61360(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationIec61360(theValueReferencePair)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theValueReferencePair)).toStrictEqual(
    false
  );
  expect(AasTypes.asDataSpecificationPhysicalUnit(theValueReferencePair)).toBeNull();
});

test("casts over an instance of ValueList", () => {
  const theValueList = TestCommonJsonization.loadMinimalValueList();

  expect(AasTypes.isHasSemantics(theValueList)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theValueList)).toBeNull();

  expect(AasTypes.isExtension(theValueList)).toStrictEqual(false);
  expect(AasTypes.asExtension(theValueList)).toBeNull();

  expect(AasTypes.isHasExtensions(theValueList)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theValueList)).toBeNull();

  expect(AasTypes.isReferable(theValueList)).toStrictEqual(false);
  expect(AasTypes.asReferable(theValueList)).toBeNull();

  expect(AasTypes.isIdentifiable(theValueList)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theValueList)).toBeNull();

  expect(AasTypes.isHasKind(theValueList)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theValueList)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theValueList)).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theValueList)).toBeNull();

  expect(AasTypes.isAdministrativeInformation(theValueList)).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theValueList)).toBeNull();

  expect(AasTypes.isQualifiable(theValueList)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theValueList)).toBeNull();

  expect(AasTypes.isQualifier(theValueList)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theValueList)).toBeNull();

  expect(AasTypes.isAssetAdministrationShell(theValueList)).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theValueList)).toBeNull();

  expect(AasTypes.isAssetInformation(theValueList)).toStrictEqual(false);
  expect(AasTypes.asAssetInformation(theValueList)).toBeNull();

  expect(AasTypes.isResource(theValueList)).toStrictEqual(false);
  expect(AasTypes.asResource(theValueList)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theValueList)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theValueList)).toBeNull();

  expect(AasTypes.isSubmodel(theValueList)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theValueList)).toBeNull();

  expect(AasTypes.isSubmodelElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theValueList)).toBeNull();

  expect(AasTypes.isRelationshipElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theValueList)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theValueList)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theValueList)).toBeNull();

  expect(AasTypes.isSubmodelElementCollection(theValueList)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theValueList)).toBeNull();

  expect(AasTypes.isDataElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theValueList)).toBeNull();

  expect(AasTypes.isProperty(theValueList)).toStrictEqual(false);
  expect(AasTypes.asProperty(theValueList)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theValueList)).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theValueList)).toBeNull();

  expect(AasTypes.isRange(theValueList)).toStrictEqual(false);
  expect(AasTypes.asRange(theValueList)).toBeNull();

  expect(AasTypes.isReferenceElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asReferenceElement(theValueList)).toBeNull();

  expect(AasTypes.isBlob(theValueList)).toStrictEqual(false);
  expect(AasTypes.asBlob(theValueList)).toBeNull();

  expect(AasTypes.isFile(theValueList)).toStrictEqual(false);
  expect(AasTypes.asFile(theValueList)).toBeNull();

  expect(AasTypes.isAnnotatedRelationshipElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asAnnotatedRelationshipElement(theValueList)).toBeNull();

  expect(AasTypes.isEntity(theValueList)).toStrictEqual(false);
  expect(AasTypes.asEntity(theValueList)).toBeNull();

  expect(AasTypes.isEventPayload(theValueList)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theValueList)).toBeNull();

  expect(AasTypes.isEventElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theValueList)).toBeNull();

  expect(AasTypes.isBasicEventElement(theValueList)).toStrictEqual(false);
  expect(AasTypes.asBasicEventElement(theValueList)).toBeNull();

  expect(AasTypes.isOperation(theValueList)).toStrictEqual(false);
  expect(AasTypes.asOperation(theValueList)).toBeNull();

  expect(AasTypes.isOperationVariable(theValueList)).toStrictEqual(false);
  expect(AasTypes.asOperationVariable(theValueList)).toBeNull();

  expect(AasTypes.isCapability(theValueList)).toStrictEqual(false);
  expect(AasTypes.asCapability(theValueList)).toBeNull();

  expect(AasTypes.isConceptDescription(theValueList)).toStrictEqual(false);
  expect(AasTypes.asConceptDescription(theValueList)).toBeNull();

  expect(AasTypes.isReference(theValueList)).toStrictEqual(false);
  expect(AasTypes.asReference(theValueList)).toBeNull();

  expect(AasTypes.isKey(theValueList)).toStrictEqual(false);
  expect(AasTypes.asKey(theValueList)).toBeNull();

  expect(AasTypes.isLangString(theValueList)).toStrictEqual(false);
  expect(AasTypes.asLangString(theValueList)).toBeNull();

  expect(AasTypes.isEnvironment(theValueList)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theValueList)).toBeNull();

  expect(AasTypes.isDataSpecificationContent(theValueList)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationContent(theValueList)).toBeNull();

  expect(AasTypes.isEmbeddedDataSpecification(theValueList)).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theValueList)).toBeNull();

  expect(AasTypes.isValueReferencePair(theValueList)).toStrictEqual(false);
  expect(AasTypes.asValueReferencePair(theValueList)).toBeNull();

  expect(AasTypes.isValueList(theValueList)).toStrictEqual(true);
  expect(AasTypes.asValueList(theValueList)).toStrictEqual(theValueList);

  expect(AasTypes.isDataSpecificationIec61360(theValueList)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationIec61360(theValueList)).toBeNull();

  expect(AasTypes.isDataSpecificationPhysicalUnit(theValueList)).toStrictEqual(false);
  expect(AasTypes.asDataSpecificationPhysicalUnit(theValueList)).toBeNull();
});

test("casts over an instance of DataSpecificationIec61360", () => {
  const theDataSpecificationIec61360 =
    TestCommonJsonization.loadMinimalDataSpecificationIec61360();

  expect(AasTypes.isHasSemantics(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asHasSemantics(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isExtension(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asExtension(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isHasExtensions(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asHasExtensions(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isReferable(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asReferable(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isIdentifiable(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asIdentifiable(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isHasKind(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isHasDataSpecification(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asHasDataSpecification(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isAdministrativeInformation(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(AasTypes.asAdministrativeInformation(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isQualifiable(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isQualifier(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(AasTypes.asAssetAdministrationShell(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isAssetInformation(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isResource(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asResource(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asSpecificAssetId(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isSubmodel(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isSubmodelElement(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asSubmodelElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isRelationshipElement(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asRelationshipElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isSubmodelElementList(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElementList(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementCollection(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isDataElement(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isProperty(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asProperty(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isMultiLanguageProperty(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asMultiLanguageProperty(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isRange(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asRange(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isReferenceElement(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isBlob(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asBlob(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isFile(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asFile(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theDataSpecificationIec61360)
  ).toBeNull();

  expect(AasTypes.isEntity(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asEntity(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isEventPayload(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asEventPayload(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isEventElement(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asEventElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isBasicEventElement(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isOperation(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asOperation(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isOperationVariable(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isCapability(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asCapability(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isConceptDescription(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isReference(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asReference(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isKey(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asKey(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isLangString(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asLangString(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isEnvironment(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theDataSpecificationIec61360)
  ).toStrictEqual(true);
  expect(
    AasTypes.asDataSpecificationContent(theDataSpecificationIec61360)
  ).toStrictEqual(theDataSpecificationIec61360);

  expect(
    AasTypes.isEmbeddedDataSpecification(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(AasTypes.asEmbeddedDataSpecification(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isValueReferencePair(theDataSpecificationIec61360)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theDataSpecificationIec61360)).toBeNull();

  expect(AasTypes.isValueList(theDataSpecificationIec61360)).toStrictEqual(false);
  expect(AasTypes.asValueList(theDataSpecificationIec61360)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theDataSpecificationIec61360)
  ).toStrictEqual(true);
  expect(
    AasTypes.asDataSpecificationIec61360(theDataSpecificationIec61360)
  ).toStrictEqual(theDataSpecificationIec61360);

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theDataSpecificationIec61360)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theDataSpecificationIec61360)
  ).toBeNull();
});

test("casts over an instance of DataSpecificationPhysicalUnit", () => {
  const theDataSpecificationPhysicalUnit =
    TestCommonJsonization.loadMinimalDataSpecificationPhysicalUnit();

  expect(AasTypes.isHasSemantics(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asHasSemantics(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isExtension(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asExtension(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isHasExtensions(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asHasExtensions(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isReferable(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asReferable(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isIdentifiable(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asIdentifiable(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isHasKind(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asHasKind(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isHasDataSpecification(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(AasTypes.asHasDataSpecification(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isAdministrativeInformation(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAdministrativeInformation(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(AasTypes.isQualifiable(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asQualifiable(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isQualifier(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asQualifier(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isAssetAdministrationShell(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAssetAdministrationShell(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(AasTypes.isAssetInformation(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asAssetInformation(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isResource(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asResource(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isSpecificAssetId(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asSpecificAssetId(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isSubmodel(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asSubmodel(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isSubmodelElement(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asSubmodelElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isRelationshipElement(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(AasTypes.asRelationshipElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isSubmodelElementList(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(AasTypes.asSubmodelElementList(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isSubmodelElementCollection(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asSubmodelElementCollection(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(AasTypes.isDataElement(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asDataElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isProperty(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asProperty(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isMultiLanguageProperty(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(AasTypes.asMultiLanguageProperty(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isRange(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asRange(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isReferenceElement(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asReferenceElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isBlob(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asBlob(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isFile(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asFile(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isAnnotatedRelationshipElement(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asAnnotatedRelationshipElement(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(AasTypes.isEntity(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asEntity(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isEventPayload(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asEventPayload(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isEventElement(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asEventElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isBasicEventElement(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asBasicEventElement(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isOperation(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asOperation(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isOperationVariable(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asOperationVariable(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isCapability(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asCapability(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isConceptDescription(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asConceptDescription(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isReference(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asReference(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isKey(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asKey(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isLangString(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asLangString(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isEnvironment(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asEnvironment(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isDataSpecificationContent(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(true);
  expect(
    AasTypes.asDataSpecificationContent(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(theDataSpecificationPhysicalUnit);

  expect(
    AasTypes.isEmbeddedDataSpecification(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asEmbeddedDataSpecification(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(AasTypes.isValueReferencePair(theDataSpecificationPhysicalUnit)).toStrictEqual(
    false
  );
  expect(AasTypes.asValueReferencePair(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(AasTypes.isValueList(theDataSpecificationPhysicalUnit)).toStrictEqual(false);
  expect(AasTypes.asValueList(theDataSpecificationPhysicalUnit)).toBeNull();

  expect(
    AasTypes.isDataSpecificationIec61360(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(false);
  expect(
    AasTypes.asDataSpecificationIec61360(theDataSpecificationPhysicalUnit)
  ).toBeNull();

  expect(
    AasTypes.isDataSpecificationPhysicalUnit(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(true);
  expect(
    AasTypes.asDataSpecificationPhysicalUnit(theDataSpecificationPhysicalUnit)
  ).toStrictEqual(theDataSpecificationPhysicalUnit);
});

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_casts.py
// Do NOT edit or append.
