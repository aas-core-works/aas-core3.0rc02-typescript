/**
 * Test JSON de/serialization of concrete classes which are either self-container
 * or contained in an {{@link types.Environment}}.
 */

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_jsonization_of_concrete_classes.py
// Do NOT edit or append.

import * as fs from "fs";
import * as path from "path";

import * as AasJsonization from "../src/jsonization";
import * as AasTypes from "../src/types";
import * as AasVerification from "../src/verification";

import * as TestCommon from "./common";

/**
 * Assert that the result of the chain JSON ðŸ ’ de-serialize ðŸ ’ object ðŸ ’ serialize ðŸ ’ JSON
 * gives the input.
 */
function assertSerializeDeserializeEqualsOriginal(
  originalJsonable: AasJsonization.JsonValue,
  instance: AasTypes.Class,
  aPath: string
): void {
  let jsonable: AasJsonization.JsonValue | null = null;
  try {
    jsonable = AasJsonization.toJsonable(instance);
  } catch (error) {
    throw new Error(
      "Expected no exception during JSON serialization " +
        `of an instance of ${instance.constructor.name} from ${aPath}, ` +
        `but got: ${error}`
    );
  }

  const inequalityError = TestCommon.checkJsonablesEqual(originalJsonable, jsonable);
  if (inequalityError !== null) {
    throw new Error(
      `The original JSON from ${aPath} is unequal the serialized JSON: ` +
        `${inequalityError.path}: ${inequalityError.message}`
    );
  }
}

const CAUSES_FOR_DESERIALIZATION_FAILURE = [
  "TypeViolation",
  "RequiredViolation",
  "EnumViolation",
  "NullViolation"
  // NOTE (mristin, 2022-12-09):
  // Unlike other SDKs, we can not be really sure what additional properties
  // JavaScript might bring about. Therefore, we leave out the tests with
  // the validation of additional properties.
  // "UnexpectedAdditionalProperty"
];

/**
 * Assert that the deserialization error equals the expected golden one,
 * or, if {@link common.RECORD_MODE} set, re-record the expected error.
 *
 * @param error - obtained error during the de-serialization
 * @param aPath - to the JSON file which caused the de-serialization error
 * @throws an {@link Error} if assertion fails
 */
function assertDeserializationErrorEqualsExpectedOrRecord(
  error: AasJsonization.DeserializationError,
  aPath: string
): void {
  const errorPath = aPath + ".error";
  const got = `${error.path}: ${error.message}\n`;

  if (TestCommon.RECORD_MODE) {
    fs.writeFileSync(errorPath, got, "utf-8");
  } else {
    if (!fs.existsSync(errorPath)) {
      throw new Error(`The file with the recorded error does not exist: ${errorPath}`);
    }

    const expected = fs.readFileSync(errorPath, "utf-8").replace(/\r\n/g, "\n");
    if (expected !== got) {
      throw new Error(
        `Expected the error:\n${JSON.stringify(expected)}\n, ` +
          `but got:\n${JSON.stringify(got)}\n` +
          `when de-serializing from ${aPath}`
      );
    }
  }
}

/**
 * Assert that the obtained verification errors equal the expected verification errors,
 * or, if {@link common.RECORD_MODE} set, re-record the expected errors.
 *
 * @param errors - obtained verification errors
 * @param aPath - to the JSON file which caused the verification errors
 * @throws an {@link Error} if assertion fails
 */
function assertVerificationErrorsEqualExpectedOrRecord(
  errors: Array<AasVerification.VerificationError>,
  aPath: string
): void {
  const errorsPath = aPath + ".errors";

  const lines = new Array<string>();
  for (const error of errors) {
    lines.push(`${error.path}: ${error.message}`);
  }
  // NOTE (mristin, 2022-12-09):
  // We add a new line for POSIX systems which prefer a new line
  // at the end of the file.
  lines.push("");
  const got = lines.join("\n");

  if (TestCommon.RECORD_MODE) {
    fs.writeFileSync(errorsPath, got, "utf-8");
  } else {
    if (!fs.existsSync(errorsPath)) {
      throw new Error(
        `The file with the recorded errors does not exist: ${errorsPath}`
      );
    }

    const expected = fs.readFileSync(errorsPath, "utf-8").replace(/\r\n/g, "\n");
    if (expected !== got) {
      throw new Error(
        `Expected the error(s):\n${JSON.stringify(expected)}\n, ` +
          `but got:\n${JSON.stringify(got)}\n` +
          `when verifying ${aPath}`
      );
    }
  }
}

test("Extension round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Extension"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Extension deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Extension"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Extension exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Extension verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Extension"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Extension exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("AdministrativeInformation round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "AdministrativeInformation"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("AdministrativeInformation deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AdministrativeInformation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AdministrativeInformation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("AdministrativeInformation verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AdministrativeInformation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AdministrativeInformation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Qualifier round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Qualifier"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Qualifier deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Qualifier"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Qualifier exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Qualifier verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Qualifier"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Qualifier exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("AssetAdministrationShell round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "AssetAdministrationShell"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("AssetAdministrationShell deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AssetAdministrationShell"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AssetAdministrationShell exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("AssetAdministrationShell verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AssetAdministrationShell"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AssetAdministrationShell exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("AssetInformation round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "AssetInformation"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("AssetInformation deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AssetInformation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AssetInformation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("AssetInformation verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AssetInformation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AssetInformation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Resource round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Resource"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Resource deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Resource"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Resource exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Resource verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Resource"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Resource exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("SpecificAssetId round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "SpecificAssetId"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("SpecificAssetId deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SpecificAssetId"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SpecificAssetId exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("SpecificAssetId verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SpecificAssetId"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SpecificAssetId exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Submodel round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Submodel"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Submodel deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Submodel"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Submodel exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Submodel verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Submodel"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Submodel exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("RelationshipElement round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "RelationshipElement"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("RelationshipElement deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "RelationshipElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of RelationshipElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("RelationshipElement verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "RelationshipElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of RelationshipElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("SubmodelElementList round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "SubmodelElementList"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("SubmodelElementList deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SubmodelElementList"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SubmodelElementList exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("SubmodelElementList verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SubmodelElementList"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SubmodelElementList exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("SubmodelElementCollection round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "SubmodelElementCollection"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("SubmodelElementCollection deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SubmodelElementCollection"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SubmodelElementCollection exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("SubmodelElementCollection verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "SubmodelElementCollection"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of SubmodelElementCollection exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Property round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Property"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Property deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Property"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Property exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Property verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Property"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Property exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("MultiLanguageProperty round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "MultiLanguageProperty"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("MultiLanguageProperty deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "MultiLanguageProperty"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of MultiLanguageProperty exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("MultiLanguageProperty verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "MultiLanguageProperty"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of MultiLanguageProperty exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Range round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Range"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Range deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Range"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Range exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Range verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Range"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Range exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("ReferenceElement round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "ReferenceElement"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("ReferenceElement deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ReferenceElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ReferenceElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("ReferenceElement verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ReferenceElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ReferenceElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Blob round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Blob"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Blob deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Blob"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Blob exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Blob verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Blob"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Blob exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("File round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "File"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("File deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "File"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of File exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("File verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "File"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of File exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("AnnotatedRelationshipElement round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "AnnotatedRelationshipElement"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("AnnotatedRelationshipElement deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AnnotatedRelationshipElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AnnotatedRelationshipElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("AnnotatedRelationshipElement verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "AnnotatedRelationshipElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of AnnotatedRelationshipElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Entity round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Entity"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Entity deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Entity"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Entity exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Entity verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Entity"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Entity exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("EventPayload round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "SelfContained",
        "Expected",
        "EventPayload"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const instanceOrError = AasJsonization.eventPayloadFromJsonable(jsonable);
    expect(instanceOrError.error).toBeNull();
    const instance = instanceOrError.mustValue();

    TestCommon.assertNoVerificationErrors(AasVerification.verify(instance), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, instance, pth);
  }
});

test("EventPayload deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "SelfContained",
      "Unexpected",
      cause,
      "EventPayload"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of EventPayload exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const instanceOrError = AasJsonization.eventPayloadFromJsonable(jsonable);
      if (instanceOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(instanceOrError.error, pth);
    }
  }
});

test("EventPayload verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "SelfContained",
      "Unexpected",
      cause,
      "EventPayload"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of EventPayload exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const instanceOrError = AasJsonization.eventPayloadFromJsonable(jsonable);
      if (instanceOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${instanceOrError.error.message}: ${instanceOrError.error.path}`
        );
      }

      const instance = instanceOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(instance));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("BasicEventElement round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "BasicEventElement"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("BasicEventElement deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "BasicEventElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of BasicEventElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("BasicEventElement verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "BasicEventElement"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of BasicEventElement exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Operation round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Operation"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Operation deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Operation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Operation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Operation verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Operation"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Operation exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("OperationVariable round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "OperationVariable"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("OperationVariable deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "OperationVariable"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of OperationVariable exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("OperationVariable verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "OperationVariable"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of OperationVariable exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Capability round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Capability"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Capability deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Capability"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Capability exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Capability verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Capability"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Capability exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("ConceptDescription round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "ConceptDescription"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("ConceptDescription deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ConceptDescription"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ConceptDescription exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("ConceptDescription verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ConceptDescription"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ConceptDescription exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Reference round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Reference"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Reference deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Reference"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Reference exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Reference verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Reference"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Reference exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Key round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "Key"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("Key deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Key"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Key exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("Key verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "Key"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Key exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("LangString round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "LangString"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("LangString deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "LangString"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of LangString exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("LangString verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "LangString"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of LangString exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("Environment round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "SelfContained",
        "Expected",
        "Environment"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const instanceOrError = AasJsonization.environmentFromJsonable(jsonable);
    expect(instanceOrError.error).toBeNull();
    const instance = instanceOrError.mustValue();

    TestCommon.assertNoVerificationErrors(AasVerification.verify(instance), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, instance, pth);
  }
});

test("Environment deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "SelfContained",
      "Unexpected",
      cause,
      "Environment"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Environment exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const instanceOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (instanceOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(instanceOrError.error, pth);
    }
  }
});

test("Environment verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "SelfContained",
      "Unexpected",
      cause,
      "Environment"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of Environment exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const instanceOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (instanceOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${instanceOrError.error.message}: ${instanceOrError.error.path}`
        );
      }

      const instance = instanceOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(instance));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("EmbeddedDataSpecification round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "EmbeddedDataSpecification"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("EmbeddedDataSpecification deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "EmbeddedDataSpecification"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of EmbeddedDataSpecification exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("EmbeddedDataSpecification verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "EmbeddedDataSpecification"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of EmbeddedDataSpecification exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("ValueReferencePair round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "ValueReferencePair"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("ValueReferencePair deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ValueReferencePair"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ValueReferencePair exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("ValueReferencePair verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ValueReferencePair"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ValueReferencePair exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("ValueList round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "ValueList"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("ValueList deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ValueList"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ValueList exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("ValueList verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "ValueList"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of ValueList exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("DataSpecificationIec61360 round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "DataSpecificationIEC61360"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("DataSpecificationIec61360 deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "DataSpecificationIEC61360"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of DataSpecificationIec61360 exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("DataSpecificationIec61360 verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "DataSpecificationIEC61360"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of DataSpecificationIec61360 exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

test("DataSpecificationPhysicalUnit round-trip OK", () => {
  const pths = Array.from(
    TestCommon.findFilesBySuffixRecursively(
      path.join(
        TestCommon.TEST_DATA_DIR,
        "Json",
        "ContainedInEnvironment",
        "Expected",
        "DataSpecificationPhysicalUnit"
      ),
      ".json"
    )
  );
  pths.sort();

  for (const pth of pths) {
    const jsonable = TestCommon.readJsonFromFileSync(pth);

    const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
    if (containerOrError.error !== null) {
      throw new Error(
        `Expected no de-serialization error for ${pth}, ` +
          `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
      );
    }

    const container = containerOrError.mustValue();
    TestCommon.assertNoVerificationErrors(AasVerification.verify(container), pth);

    assertSerializeDeserializeEqualsOriginal(jsonable, container, pth);
  }
});

test("DataSpecificationPhysicalUnit deserialization fail", () => {
  for (const cause of CAUSES_FOR_DESERIALIZATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "DataSpecificationPhysicalUnit"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of DataSpecificationPhysicalUnit exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error === null) {
        throw new Error(`Expected a de-serialization error for ${pth}, but got none`);
      }

      assertDeserializationErrorEqualsExpectedOrRecord(containerOrError.error, pth);
    }
  }
});

test("DataSpecificationPhysicalUnit verification fail", () => {
  for (const cause of TestCommon.CAUSES_FOR_VERIFICATION_FAILURE) {
    const baseDir = path.join(
      TestCommon.TEST_DATA_DIR,
      "Json",
      "ContainedInEnvironment",
      "Unexpected",
      cause,
      "DataSpecificationPhysicalUnit"
    );

    if (!fs.existsSync(baseDir)) {
      // No examples of DataSpecificationPhysicalUnit exist for the failure cause.
      continue;
    }

    const pths = Array.from(TestCommon.findFilesBySuffixRecursively(baseDir, ".json"));
    pths.sort();

    for (const pth of pths) {
      const jsonable = TestCommon.readJsonFromFileSync(pth);

      const containerOrError = AasJsonization.environmentFromJsonable(jsonable);
      if (containerOrError.error !== null) {
        throw new Error(
          `Expected no de-serialization error for ${pth}, ` +
            `but got: ${containerOrError.error.message}: ${containerOrError.error.path}`
        );
      }

      const container = containerOrError.mustValue();

      const verificationErrors = Array.from(AasVerification.verify(container));
      assertVerificationErrorsEqualExpectedOrRecord(verificationErrors, pth);
    }
  }
});

// This code has been automatically generated by:
// testgen/aas_core_3_0_rc2_typescript_testgen/generate_test_for_jsonization_of_concrete_classes.py
// Do NOT edit or append.
